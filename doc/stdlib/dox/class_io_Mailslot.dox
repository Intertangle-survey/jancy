//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

/*!

\class io.Mailslot

	\ingroup file

	\import io_base.jncx
	\import io_Mailslot.jnc

	\brief This class provides high-level asynchronous streaming interface for the *server* side of Windows mailslots which are used, for example, in SMB (Server Message Blocks) protocol and Windows Computer Browser service.

	For working from the *client* side of a mailslot, please use `io.File` or `io.FileStream`.

	A typical sequence of steps when working with a mailslot looks something like this:

	* Assign your event handler using ``m_onMailslotEvent`` (you would probably also want to *schedule* your event handler to be run in particular environment, e.g. in specific thread)
	* Open a mailslot with ``open`` method;
	* When ``IncomingData`` event is fired, read from the mailslot using ``read`` method;
	* Close the mailslot when no longer needed with ``close`` method.

	.. rubric:: Sample code:

	.. ref-code-block::

		class MyDialog
		{
			// ...

			io.Mailslot m_mailslot;

			construct ();
			onMailslotEvent (`io.MailslotEventParams` const* params);
		}

		MyDialog.construct ()
		{
			// ...
			m_mailslot.m_onMailslotEvent += onMailslotEvent @ g_mainThreadScheduler;
		}

		MyDialog.onMailslotEvent (`io.MailslotEventParams` const* params)
		{
			if (params.m_syncId != m_mailslot.m_syncId) // late event
				return;

			switch (params.m_code)
			{
			case `io.mailslotEventCode.IncomingData`:
				char buffer [256];
				size_t size = m_mailslot.read (buffer, sizeof (buffer));
				// ...
				break;
			}
		}

	\sa `io.MailslotEventParams`, `io.MailslotEventCode`, `io.File`, `io.FileStream`

	\field m_isOpen

		Holds the open status for the mailslot, i.e. ``true`` if opened; ``false`` otherwise.

	\field m_syncId

		Holds the synchronization ID for the mailslot [#f3]_.

	\event m_onMailslotEvent

		This event is fired whenever an event occurs on the file stream.

		For the list of possible events, refer to `io.MailslotEventCode` enumeration.

		Event handler receives a single argument of type `io.MailslotEventParams` which holds parameters of the particular event [#f3]_.

	\fn open

		Opens or creates a mailslot.

		The function accepts a single argument, ``name``, which is used to specify the name of the mailslot.

		Returns ``true`` on success. If the mailslot could not be opened, IO error supplied by operating system is set and then the function returns ``false``  [#f1]_.

	\fn close

		Closes a previously opened mailslot, does nothing if the mailslot is not opened. This function always succeeds.

		Sometimes it may be convenient to use *disposable* pattern to ensure timely invokation of ``close`` [#f2]_.

	\fn read

		Attempts to read up to ``size`` bytes from the mailslot into the buffer pointed to by ``p``.

		Returns the actual amount of bytes read or ``-1`` if error occurs  [#f1]_.

		Normally you would call this function from within your event handler for ``IncomingData`` event. If this function is called when there is no incoming data, it blocks until either the data arrives, or the mailslot is closed.

	\alias dispose

		Effectively makes ``io.Mailslot`` a *disposable* class [#f2]_.

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|

	\footnote f3

		|footnote-sync-id|

*/
