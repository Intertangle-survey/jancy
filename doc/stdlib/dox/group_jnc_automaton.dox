//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

/*!

\defgroup automaton

	\title Automatons & Recognizers

	\brief Jancy automatons allow for convenient creation of lexers/scanners.

	The idea is taken from well-known tools like *Lex*, *Flex*, *Ragel* etc. First, you define a list of recognized lexemes in the form of regular expressions. Then you specify which actions to execute when these lexemes are found in the input stream. Jancy compiler will then automatically build a DFA to recognize your language.

	To use the resulting DFA you need a `jnc.Recognizer` object -- it will hold the state of DFA and buffer matched lexemes.

	To understand relations between automatons and recognizers better, think about the follow analogy. You have an XBox console and a game disc. First you have to load the disc into console, and then you play it -- you can even interrupt the process of playing (e.g. to continue it the next day).

	In this analogy game disc is ``automaton`` function and console is `jnc.Recognizer` instance. Recognizer holds the DFA state and performs recognition driven by the ``automaton`` function. And just like with XBox example above, you can recognize a part of data first, then wait (for example, until the next portion arrives over the network), then continue where you left, and so on.

	Sample code:

	.. ref-code-block::

		`jnc.AutomatonResult` automaton fooBar (`jnc.Recognizer`* recognizer)
		{
		    %% "foo"
		        // lexeme found: foo;

		    %% "bar"
		        // lexeme found: bar;

		    %% [0-9]+
		        // lexeme found: decimal-number

		        char const* numberString = recognizer.m_lexeme;

		    %% [ \r\n\t]+
		        // ignore whitespace
		}

		void foo ()
		{
			`jnc.Recognizer` recognizer (fooBar);

			bool result = try recognizer.recognize ("foo bar 100 baz");
			if (!result)
			{
			    // handle recognition error
			}
		}
*/
