//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

/*!

\class io.Pcap

	\import io_pcap.jncx

	\brief This class provides high-level asynchronous interface for the Pcap (Packet Capture) library.

	Pcap library (called WinPcap on Windows) is de-facto the standard tool for capturing and injecting low-level network traffic.

	A typical sequence of steps when working with ``io.Pcap`` looks something like this:

	* Assign your event handler using ``m_onPcapEvent`` (you would probably also want to *schedule* your event handler to be run in particular environment, e.g. in specific thread)
	* Open a live capture using ``openDevice`` or a capture file (\*.pcap) using ``openFile`` method;
	* When ``ReadyRead`` event is fired, read packet using ``read`` method;
	* If you opened a live capture, you can also inject packets with ``write`` method;
	* Close Pcap object when no longer needed with ``close`` method.

	Code sample:

	.. ref-code-block::

		class MyDialog
		{
			// ...

			io.Pcap m_pcap;

			construct ();

			startCapture (
				char const* device,
				char const* filter = null
				);

			onPcapEvent (`io.PcapEventParams` const* params);
		}

		MyDialog.construct ()
		{
			// ...
			m_pcap.m_onPcapEvent += onPcapEvent @ g_mainThreadScheduler;
		}

		MyDialog.startCapture (
			char const* device,
			char const* filter = null
			)
		{
			bool result = try m_pcap.openDevice (device, filter);
			if (!result)
			{
				// handle the error...
			}
		}

		MyDialog.onPcapEvent (`io.PcapEventParams` const* params);
		{
			if (syncId != m_pcap.m_syncId) // late event
				return;

			switch (params.m_code)
			{
			case `io.PcapEventCode.ReadyRead`:
				char buffer [256];
				size_t size = m_pcap.read (buffer, sizeof (buffer));
				// ...
				break;
			}
		}

	\sa `io.PcapEventParams`, `io.PcapEventCode`

	\field m_filter

		Holds currently specified capture filter [#f4]_.

	\field m_isPromiscious

		Holds ``true`` if network interface has been opened in promiscuos mode; ``false`` otherwise.

	\field m_isOpen

		Holds the open status for the Pcap object, i.e. ``true`` if opened; ``false`` otherwise.

	\field m_syncId

		Holds the synchronization ID for the Pcap object [#f3]_.

	\event m_onPcapEvent

		This event is fired whenever an event occurs on the Pcap capture object.

		For the list of possible events, refer to `io.PcapEventCode` enumeration.

		Event handler receives a single argument of type `io.PcapEventParams` which holds parameters of the particular event [#f3]_.

	\fn openDevice

		Opens a network interface for Pcap capture.

		The function accepts 3 arguments. The first one, ``deviceName``, is used to specify the device to start capture on. To obtain a list of available devices, use `io.createPcapDeviceDescList` function.

		The second one, ``filter``, allows you to specify a capture filter [#f4]_ which will be applied to incoming packets -- packets which do not pass the filter, will never be signalled via `io.PCapEventCode.ReadyRead` event and could not be read by ``read`` method.

		The third and final parameter specifies whether to put interface in promiscuous mode.

		Returns ``true`` on success. If live capture on specified device could not be opened, function sets the error reported by Pcap and returns ``false`` [#f1]_.

	\fn openFile

		Opens a previously captured \*.pcap file specified by ``fileName`` argument.

		The second argument, ``filter``, has the same meaning as in ``openDevice`` method [#f4]_.

		Returns ``true`` on success. If capture file could not be opened, function sets the error reported by Pcap and returns ``false`` [#f1]_.

	\fn close

		Closes a previously opened live capture or a capture file, does nothing if Pcap is not opened. This function always succeeds.

		Sometimes it may be convenient to use *disposable* pattern to ensure timely invokation of ``close`` [#f2]_.

	\fn setFilter

		Allows you to change current capture filter without restarting the capture.

		Returns ``true`` on success. If capture filter could not be changed, function sets the error reported by Pcap and returns ``false`` [#f1]_.

	\fn write

		Attempts to inject ``size`` bytes from the buffer pointed to by ``p`` as a packet on a currently opened device.

		Returns the actual amount of bytes written on success. If write operation is unsuccessful, function sets the error reported by Pcap and returns ``-1`` [#f1]_.

	\fn read

		Reads the next packet into the buffer pointed to by ``p`` and ``size`` bytes long.

		Returns the actual amount of bytes read or ``-1`` if error occurs.

		If read operation is unsuccessful, function sets the error reported by Pcap and returns ``-1`` [#f1]_.

		Normally you would call this function from within your event handler for ``ReadyRead`` event. If this function is called when there are no incoming pacets, it blocks until either a packet arrives, or Pcap is closed.

	\alias dispose

		Effectively makes ``io.Pcap`` a *disposable* class [#f2]_.

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|

	\footnote f3

		|footnote-sync-id|

	\footnote f4

		For detailed description of the syntax used in Pcap capture filter expressions refer to: http://www.tcpdump.org/manpages/pcap-filter.7.html

*/
