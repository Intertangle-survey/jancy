/*!

\class io.File

	\ingroup file

	\brief The io.File class provides standard facilities for reading from and writing to files.

	All the methods of this class are mapped directly to underlying Operating System API (not to the C-runtime library). A typical sequence of working with a file looks something like this:

	* Open a file with ``open`` method;
	* Read from the file using ``read`` method;
	* Write to the file using ``write`` method;
	* Close the file with ``close`` method.

	If an instance of io.File class is being abandoned without calling ``close``, it will be closed automatically in io.File destructor -- which will happen whenever the Jancy Garbage Collector decides to sweep unused objects.

	However, leaving this at Garbage Collector' discretion is undesirable, as it leads to undeterministic resource release -- file will be kept open for unknown period of time.

	An easy way for overcoming this problem is to always work with files using Jancy ``disposable`` storage specifier, like this:

	.. code-block:: none

		foo ()
		{

			// ...

			disposable io.File file;
			file.open ();

			// work with file
			// ...


		} // <-- file.close () is guaranteed to be called upon exiting the scope


	\field m_isOpen

		Detailed description for field m_isOpen

	\property m_size

		Detailed description for property m_size

	\property m_position

		Detailed description for property m_position

	\fn open

		Detailed description for function open

	\fn close

		Detailed description for function close

	\fn read

		Detailed description for function read

	\fn write

		Detailed description for function write

*/