//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

/*!

\enum io.SocketEventCode

	\brief This enumeration contains codes of all possible events that might happen on `io.Socket` object.

	When `io.Socket` object is about to fire an event, it allocates an `io.SocketEventParams` structure, sets `io.SocketEventParams.m_eventCode` field to one of the values below, fills other relevant fields of and then calls all subscribers of `io.Socket.m_onSocketEvent`.

	\sa `io.Socket`, `io.SocketEventParams`

	\enumvalue ConnectCompleted

		Connection request completed successfully.

	\enumvalue ConnectCancelled

		Connection request cancelled by `io.Socket.close` call.

	\enumvalue ConnectError

		Connection request failed; detailed information about the error is available at: `io.SocketEventParams.m_error`.

	\enumvalue Disconnected

		Connection has been terminated by the remote node. `io.SocketEventParams.m_flags` contains additional information about disconnect type. Note that if connection was terminated by the local node (using `io.Socket.close`), ``Disconnect`` event is **not** fired.

	\enumvalue IncomingData

		More data is available on the socket; this data could be fetched with `io.Socket.recv` or `io.Socket.recvFrom` methods.

	\enumvalue IncomingConnection

		New incoming client connection is pending on the listening server socket. The new client can be accepted using `io.Socket.accept` method (to reject the connection you still have to accept it first, and then close it)

	\enumvalue TransmitBufferReady

		Socket transmit buffer is ready to accept more data; it's OK to issue more `io.Socket.send` requests. Note that this event is not supposed to be used with datagram sockets.

*/
