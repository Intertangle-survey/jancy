/*!

\class io.NamedPipe

	\brief This class provides high-level asynchronous interface for the *server* side of Windows named pipes. Windows named pipes are widely used for IPC (Inter-Process Communications) between applications, services and drivers on Windows platform.

	For working from the *client* side of a mailslot, please use `io.File` class.

	A typical sequence of steps when working with a named pipe server looks something like this:

	* Assign your event handler using ``m_onIncomingConnection`` (you would probably also want to *schedule* your event handler to be run in particular environment, e.g. in specific thread)
	* Open a server-side named pipe with ``open`` method;
	* When ``m_onIncomingConnection`` event is fired, accept a client connection using ``accept`` method;
	* Communicate with the client via `io.FileStream` returned by ``accept``;
	* Close named pipe server and accepted client file streams when no longer needed with ``close`` method.

	\field m_isOpen

		Holds the open status for the named pipe, i.e. ``true`` if opened; ``false`` otherwise.

	\field m_syncId

		Holds the synchronization ID for the named pipe. For details, please refer to :ref:`sync-id-explanation`.

	\event m_onIncomingConnection

		This event is fired whenever there is a client trying to connect to the named pipe server. Call ``accept`` method to accept incoming connection and start communication with this particular client.

	\fn open

		Opens server-side named pipe(s), effectively starting a named pipe server.

		The function accepts two arguments. The first one, ``name``, is used to specify the name of the server-side named pipe. The second one, ``backLog``, specifies the size of the server backlog. Server backlog is defined as the maximum length of the queue of *pending* client-side connections, i.e. connections which has not been accepted via ``accept`` method yet.

		Returns ``true`` on success. If the named pipe server could not be opened, IO error supplied by operating system is set and then the function returns ``false``. Since this is an ``errorcode`` function, you can use exception semantics to handle the error.

	\fn close

		Closes all previously opened server-side named pipes in the backlog; does nothing if the named pipe server is not started. This function always succeeds.

	\fn accept

		Accepts a client connection and returns a resulting `io.FileStream` object to communicate with this particular client. To terminate a client connection, issue ``close`` method on the client file stream object.

*/