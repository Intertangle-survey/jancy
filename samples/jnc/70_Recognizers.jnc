//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Jancy features automaton functions as a built-in support for creating
// protocol analyzers, programming language lexers and other recognizers.

// If you ever used tools like Lex, Flex, Ragel etc then you are already
// familiar with the idea. If not, then it is pretty simple, actually. First,
// you define a list of recognized lexemes in form of regular expressions. Then
// you specify which actions to execute when these lexemes are found in the
// input stream. Jancy compiler will then automatically build a DFA to
// recognize your language.

//..............................................................................

bool errorcode fooBar (
	jnc.RegExState* regExState, 
	const char* p,
	size_t length = -1
	)
{
	if (length == -1)
		length = strlen (p);

	const char* end = p + length;
	
	// post-condition loop allows passing 'null' as eof
	do
	{
		size_t prevOffset = regExState.m_currentOffset;

		regex switch (regExState, p, end - p)
		{
		case "foo":
			printf ("lexeme found: foo\n");
			break;

		case "bar":
			printf ("lexeme found: bar\n");
			break;

		case "\\d+":
			// you can access matched lexeme via jnc.RegExState.m_match field
			printf ("lexeme found: dec '%s'\n", regExState.m_match.m_text);
			break;

		case "\\s+":
			// ignore whitespace
			break;

		default:
			if (!regExState.m_isError)
			{
				assert (regExState.m_isIncremental);
				return true;
			}

			std.setError ("unrecognized lexeme");
			return false;
		}

		// Advance to the next lexeme. Note that adding regExState.m_match.m_length 
		// will only work in case of non-incremental recgnition.

		p += regExState.m_currentOffset - prevOffset;
	} while (p < end) 

	return true;
}

//..............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	// you need a jnc.RegExState object to store the state of DFA

	jnc.RegExState regExState;

	bool result = try fooBar (regExState, " foo bar 100 baz");
	if (!result)
		printf ("recognition error: %s\n", std.getLastError ().m_description);

	// It's OK to perform recognition incrementally, chunk by chunk.
	// This is cructial when analyzing protocols operating over stream
	// transports like TCP or Serial, where it is not guaranteed that a message
	// will be delivered as a whole and not as multiple segments.

	regExState.reset ();
	regExState.m_isIncremental = true; // turn on incremental matching

	try
	{
		fooBar (regExState, " ba");
		fooBar (regExState, "r f");
		fooBar (regExState, "oo ");
		fooBar (regExState, "100");
		fooBar (regExState, "000");

		// Incremental recognizer must be notified about eof -- this 
		// can trigger actions or errors.

		fooBar (regExState, null);

	catch:
		printf ("recognition error: %s\n", std.getLastError ().m_description);
	}

	return 0;
}

//..............................................................................
