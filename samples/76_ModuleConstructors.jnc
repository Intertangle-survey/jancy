// jancy provides module constructors and destructors as a convenient way to 
// write initialization and cleanup code for compilation units

//.............................................................................

class C1
{
	construct ()
	{
		printf ("C1.construct ()\n");
	}

	destruct ()
	{
		printf ("C1.destruct ()\n");
	}
}

//.............................................................................

// global static variable with constructor & destructor

C1 g_c; 

// global static variable with initializer

int g_x = foo (); 

int foo ()
{
	printf ("foo ()\n");
	return 100;
}

// module constructor is called after all global static variables have been 
// constructed and initialized

construct ()
{
	printf ("module.construct ()\n");
}

// module destructor is called before destruction of global static variables

destruct ()
{
	printf ("module.destruct ()\n");
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");
	return 0;
}

//.............................................................................
