// Unlike with C++ and Java, catching an error condition in Jancy with a catch
// label doesn't provide any additional information on the nature of that 
// error.

// We suggest using Jancy's default error facilities for storing and retrieving 
// the error information to/from thread-local storage. This is similar to POSIX
// errno or Windows GetLastError approach (but not limited to an integer error 
// code).

// However, it is up to the developer to choose the suitable mechanism of error
// reporting.

//.............................................................................

bool foo (int a) throws
{
	printf ("foo (%d)\n", a);

	if (a < 0)
	{
		jnc.setPosixError (1); // EPERM
		return false;
	}

	if (a > 100)
	{
		jnc.setStringError ("invalid argument");
		return false;
	}

	return true;
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	bool result = try foo (-1);
	if (!result)
	{
		printf ("foo failed (%s)\n", jnc.getLastError ().m_description);
	}

	foo (150);
	return 0;

catch:
	printf ("error caught (%s)\n", jnc.getLastError ().m_description);
	return -1;
}

//.............................................................................
