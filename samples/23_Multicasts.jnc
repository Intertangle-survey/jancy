// multicasts are compiler-generated classes allowing accumulating multiple 
// function pointers and calling them at once. just like function pointes, 
// multicasts can be thin or weak

//.............................................................................

foo (int x)
{
	printf ("foo (%d)\n", x);
}

bar (
	int x, 
	int y	
	)
{
	printf ("bar (%d, %d)\n", x, y);
}

baz (int x)
{
	printf ("baz (%d)\n", x);
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	// add 2 function pointers ('add' and '+=' could be used interchangeably)

	multicast m (int);
	m += foo;
	m += bar ~(, 1000);

	printf ("multicast call #1...\n");
	m (5);

	// events are just special pointers to multicasts with restricted access to 
	// multicast methods 'call', 'set', 'clear'

	event* e (int) = m;

	// you can only add and remove handlers through event pointer...
	
	e += baz;

	// ...but not call it

	// e (100); // <-- error

	printf ("multicast call #2...\n");
	m (15);

	// '= null' will work also

	m.clear (); 
	
	// removal of pointers from multicast is done differently from C#. jancy 
	// can create dynamic closures and generate thunks when neccessary, so 
	// simple lookup on the function pointer would not be even possible in the 
	// most general case. therefore, handle-table approach is used.

	intptr cookie1 = e.add (foo); 
	intptr cookie2 = e.add (bar ~(, 2000));

	printf ("multicast call #3...\n");
	m (25);
	
	// event pointer can be used to remove entries from multicast

	e -= cookie1; 

	printf ("multicast call #4...\n");
	m (35);
	
	// converting from a multicast to a function pointer is somewhat ambiguous: 
	// should it be live or snapshot? meaning, if after creating a function 
	// pointer we modify the original multicast, should the function pointer 
	// see the changes or not?

	// to deal with ambiguity, multicast class provides 'getSnapshot' method

	function* f1 (int) = m.getSnapshot ();

	// converting to a function pointer implicitly yields a live pointer

	function* f2 (int) = m; 

	// modify the original multicast

	m += foo;
	m += baz;

	printf ("snapshot pointer call...\n");
	f1 (45);
	
	printf ("live pointer call...\n");
	f2 (55);

	return 0;
}

//.............................................................................

