// jancy supports the RAII paradigm (resource-acquisition-is-initialization).

// class variables allocated on stack are destructed upon exiting the scope 
// they belong to, thus ensuring deterministic resource release.

//.............................................................................

class C1
{
	int m_x;

	construct (int x)
	{
		printf ("C1.construct (%d) -- acquire resources\n", x);
		m_x = x;
	}

	destruct ()
	{
		printf ("C1.destruct () { m_x = %d } -- release resources\n", m_x);
	}
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	{
		// use explicit 'stack' specifier to allocate a class variable on stack
		// and not gc-heap (which is default for class variables)
		
		stack C1 c (10); 

		// C1.destruct is called
	} 

	return 0;
}

//.............................................................................
