// 99% of the time property getter simply returns the value of some internal 
// field and all the property logic is actually contained in setter(s). 

// jancy supports so-called 'autoget' properties to spare developer from the 
// routine of writing trivial getters - compiler will generate both a field to 
// store property value and a getter to retrieve it and will actually bypass 
// getter completely wherever it's possible.

//.............................................................................

// simple autoget property declaration syntax

int autoget property g_simpleProp;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// setter implementation (no getter needed)

g_simpleProp.set (int x)
{
	printf ("g_simpleProp.set (%d)\n", x);
	
	// by default, the name of a compiler-generated field is 'm_value'

	m_value = x; 
}

//.............................................................................

// similar property declared using full syntax

property g_prop
{	
	// declaring an 'autoget' field implicitly makes property 'autoget'

	int autoget m_x; 

	set (int x)
	{
		printf ("g_prop.set (int %d)\n", x);
		m_x = x;
	}

	// setters of autoget properties can be overloaded

	set (double x)
	{
		printf ("g_prop.set (double %f)\n", x);
		m_x = (int) x;
	}
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	g_simpleProp = 100;
	int x = g_simpleProp;
	printf ("x = %d\n", x);

	g_prop = 500;
	g_prop = 2.5;
	x = g_prop;
	printf ("x = %d\n", x);

	return 0;
}

//.............................................................................
