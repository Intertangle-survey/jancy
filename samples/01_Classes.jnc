// class in jancy is a special kind of datatype. actual user fields are 
// preceded with header containing meta-information such as type, vtable 
// pointer, root object pointer, gc-related flags etc.

//.............................................................................

class C1
{
	// default access is public; access can be specified in C++ style...

protected: 
	static int m_table [10];
	
	// ...or in java-style;	in-place field initialization is supported

	public int m_x = 10;
	public int m_y = 20;

public:
	// syntax for declaring special members is a bit different from C++/java

	// static constructors / destructors

	static construct (); 

	// preconstructors are called before each constructor overload
	// (similar to java initializer blocks)
	
	preconstruct () 
	{
		printf ("C1.preconstruct ()\n");
	}

	construct ()
	{
		printf ("C1.construct ()\n");
	}	

	// overloaded constructor
	
	construct (
		int x,
		int y
		);

	destruct () 
	{
		printf ("C1.destruct ()\n");
	}

	// overloaded '+=' operator 

	operator += (int d); 
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// implementation of member methods can be out-of-class (like in C++)

C1.static construct ()
{
	printf ("C1.static construct ()\n");

	for (int i = 0; i < countof (m_table); i++)
		m_table [i] = i;
}

C1.construct (
	int x,
	int y
	)
{
	printf ("C1.construct (%d, %d)\n", x, y);
	m_x = x;
	m_y = y;
}

C1.operator += (int d) 
{
	printf ("C1.operator += (%d)\n", d);

	m_x += d;
	m_y += d;
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	// jancy does not have distinction between reference-types and value-types.
	// it means that unlike in java, when jancy programmer declares a class 
	// variable or field, he creates an actual object, not a pointer to object.
	// in jancy what *is* a pointer, must *look like* a pointer.

	C1 c (100, 200);
	c += 1;

	printf ("c = { %d, %d }\n", c.m_x, c.m_y);

	return 0;
}

//.............................................................................
