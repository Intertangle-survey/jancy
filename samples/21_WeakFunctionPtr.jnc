// function pointers can be 'weak', meaning they do not retain some of the 
// objects captured in the closure from being collected by gc.

//.............................................................................

class C1
{
	int m_x = -1;

	construct ()
	{
		printf ("C1.construct ()\n");
	}		

	destruct ()
	{
		printf ("C1.destruct ()\n");
	}		

	foo (
		int a,
		int b,
		int c		
		)
	{
		printf ("C1.foo (%d, %d, %d) { m_x = %d }\n", a, b, c, m_x);
	}
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	C1* c = new C1;

	// to make function pointer weak, we must specify which of the captured 
	// arguments will be weakly referenced. 
	
	// in the current version of jancy you can only make 'this' argument weak

	function weak* wf (int, int) = c.weak foo ~(,, 3);

	// weak function pointers cannot be called

	// wf (10, 20); <-- error

	// if we lose strong pointer then object will get destructed next gc run

	// c = null; 

	printf ("gc run...\n");
	jnc.runGc ();

	// try to recover strong pointer

	function* f (int, int) = wf;
	if (f)
	{
		printf ("object survived gc run\n");
		f (1, 2);
	}
	else
	{
		printf ("object was collected during gc run\n");
	}

	return 0;
}

//.............................................................................
