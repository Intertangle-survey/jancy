// downcasting or casting to a pointer-to-char (or similar) type represents a 
// critical threat to security cause it makes it possible to overwrite pointer 
// validator with random data, thus damaging validator itself

// to prevent this from happening, jancy separates all the types into two 
// categories: POD-types and non-POD-types. non-POD-types are the ones with 
// meta-information (i.e. classes, safe pointers and aggregates containing 
// other non-POD types). casts from and to non-POD types are only allowed when
// it's safe to do (e.g. upcasts or casts to const POD pointer).

// to perform downcasts of non-POD types, developer must use dynamic cast 
// operator. this will translate into a call to jancy runtime support routine
// which will return the resulting pointer or a null if the requested downcast 
// is not available

//.............................................................................

struct Vector
{
	double m_x;
	double m_y;
	double m_z;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct EulerAngles
{
	double m_alpha;
	double m_beta;
	double m_gamma;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// in C++ it's not a POD, but in jancy it is (contains no meta-info)

struct Transform: 
	EulerAngles,
	Vector
{
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// non-POD

struct TaggedTransform: Transform
{
	char const* m_tag;
}

//.............................................................................

foo (TaggedTransform* taggedTransform)
{
	// upcasts are always ok, no cast operator is needed

	Transform* transform = taggedTransform;
	EulerAngles* angles = taggedTransform;
	Vector* vector = taggedTransform;	

	// non-POD types cannot be cast to POD types to prevent damaging meta-info

	// char* p = (char*) taggedTransform; // <-- error

	// non-POD types can, however, be cast to POD const pointers for reading

	char const* c = (char const*) taggedTransform;	

	printf (
		"foo (taggedTransform = %x)\n"
		"{\n" 
		"	transform = %x;\n" 
		"	angles = %x;\n"
		"	vector = %x;\n"
		"	c = %x;\n"
		" }\n",
		taggedTransform,
		transform,
		angles,
		vector
		);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bar (Vector* vector)
{
	// POD-types can be cast to each other using cast operator...

	Transform* transform1 = (Transform*) vector;

	// ...even if they aren't related via base-child hierarchy

	EulerAngles* angles1 = (EulerAngles*) vector;

	// non-POD-types cannot be cast to (unless it's an upcast, of course)
	
	// TaggedTransform const* p = (TaggedTransform const*) vector; // <-- error

	// dynamic cast operator is available for performing safe dynamic downcasts

	TaggedTransform* taggedTransform = dynamic (TaggedTransform*) vector;

	// dynamic cast is also applicable to POD-types

	Transform* transform2 = dynamic (Transform*) vector;
	EulerAngles* angles2 = dynamic (EulerAngles*) vector;

	printf (
		"bar (vector = %x)\n"
		"{\n" 
		"	transform1 = %x;\n" 
		"	transform2 = %x;\n" 
		"	angles1 = %x;\n"
		"	angles2 = %x;\n"
		"	taggedTransform = %x;\n"
		"}\n",
		vector,
		transform1,
		transform2,
		angles1,
		angles2,
		taggedTransform
		);	
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	TaggedTransform taggedTransform;
	foo (taggedTransform);
	bar (taggedTransform);

	Transform transform;
	bar (transform);

	Vector vector;
	bar (vector);

	return 0;
}

//.............................................................................
