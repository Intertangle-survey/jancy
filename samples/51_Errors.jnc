// unlike C++ and java catching an error condition in jancy with a catch label
// does not provide any additional information about the nature of that error. 

// we suggest using jancy default error facilities for storing and retrieving 
// error information to/from thread local storage - similar to POSIX errno or 
// Windows GetLastError approach (but not limited to an integer error code).

// however, it is up to developer to choose which particular mechanism of error 
// reporting to use.

//.............................................................................

bool foo (int a) throws
{
	printf ("foo (%d)\n", a);

	if (a < 0)
	{
		jnc.setPosixError (1); // EPERM
		return false;
	}

	if (a > 100)
	{
		jnc.setStringError ("invalid argument");
		return false;
	}

	return true;
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	bool result = try foo (-1);
	if (!result)
	{
		printf ("bar returned error (%s)\n", jnc.getLastError ().m_description);
	}

	foo (150);
	return 0;

catch:
	printf ("error caught (%s)\n", jnc.getLastError ().m_description);
	return -1;
}

//.............................................................................
