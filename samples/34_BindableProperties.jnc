// jancy supports 'bindable' properties which will notify subscribers after 
// they have changed. 

// firing of the bindable event must be done manually - that is, unless the 
// whole property is compiler-generated. in the latter case this property is 
// called 'bindable data'.

//.............................................................................

// simple bindable property declaration syntax

int autoget bindable property g_simpleProp;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// setter implementation

g_simpleProp.set (int x)
{
	printf ("g_simpleProp.set (%d)\n", x);

	if (m_value == x)
		return;

	m_value = x;
	
	// by default, the name of compiler-generated event is 'm_onChanged'

	m_onChanged (); 
}

//.............................................................................

// similar property declared using full syntax

property g_prop
{	
	// declaring an 'autoget' field implicitly makes property 'autoget'

	autoget int m_x; 

	// declaring a 'bindable' event implicitly makes property 'bindable'

	bindable event m_e (); 

	set (int x);
	set (double x);
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// setters implementation

g_prop.set (int x)
{
	printf ("g_prop.set (int %d)\n", x);

	if (m_x == x)
		return;

	m_x = x;
	m_e ();
}

g_prop.set (double x)
{
	printf ("g_prop.set (double %f)\n", x);

	if (m_x == (int) x)
		return;

	m_x = (int) x;
	m_e ();
}

//.............................................................................

// bindable data is completely compiler-generated property with trivial getter 
// and setter - the sole purpose of bindable data is to track data changes

int bindable g_data;

//.............................................................................

// onChanged event handlers

onSimplePropChanged ()
{
	printf ("g_simpleProp has changed (new value = %d)\n", g_simpleProp);
}

onPropChanged ()
{
	printf ("g_prop has changed (new value = %d)\n", g_prop);
}

onDataChanged ()
{
	printf ("g_data has changed (new value = %d)\n", g_data);
}

//.............................................................................

// entry point

int main ()
{
	printf ("main ()\n");

	// to access bindable event of a property, use 'bindingof' operator

	bindingof (g_simpleProp) += onSimplePropChanged;
	bindingof (g_prop) += onPropChanged;
	bindingof (g_data) += onDataChanged;

	g_simpleProp = 100;
	g_simpleProp = 100; // bindable event is not going to get fired

	g_prop = 500;
	g_prop = 5.2;
	g_prop = 5;   // bindable event is not going to get fired

	g_data = 1000;
	g_data = 1000; // bindable event is not going to get fired

	return 0;
}

//.............................................................................
