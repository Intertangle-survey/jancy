//..............................................................................
//
// UDP Flow Monitor log representer
//

import "log_Representer.jnc"
import "io_base.jncx"
import "io_SocketAddress.jnc"
import "UdpFlowMonLogRecordCode.jnc"

//..............................................................................

bool representUdpFlowMonLog(
	log.RepresenterTarget* target,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch(recordCode)
	{
	case UdpFlowMonLogRecordCode.TxPacket:
	case UdpFlowMonLogRecordCode.RxPacket:
		UdpFlowMonPacketParams const* params = (UdpFlowMonPacketParams const*) p;

		target.m_lineAttr.m_iconIdx = recordCode == UdpFlowMonLogRecordCode.TxPacket ?
			log.StdLogIcon.TxPacket :
			log.StdLogIcon.RxPacket;
		target.m_lineAttr.m_backColor = gui.StdColor.PastelGray;

		char const* text = $"From \e[34m%1\e[m to \e[34m%2\e[m (%3 B)" (
			params.m_srcAddress.getString(),
			params.m_dstAddress.getString(),
			params.m_size
			);

		if (params.m_isFragmented)
			text = $"$text \e[31mfragmented";

		target.addHyperText(text);
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................
