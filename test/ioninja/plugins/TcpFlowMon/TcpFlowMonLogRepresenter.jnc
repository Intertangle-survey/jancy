//..............................................................................
//
// TCP Monitor log representer
//

import "log_Representation.jnc"
import "io_base.jncx"
import "io_SocketAddress.jnc"
import "TcpFlowMonLogRecordCode.jnc"

//..............................................................................

bool representTcpFlowMonLog(
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
	)
{
	switch (recordCode)
	{
	case TcpFlowMonLogRecordCode.Connecting:
		char const* srcAddressString = ((io.SocketAddress const*) p).getString();
		char const* dstAddressString = ((io.SocketAddress const*) p + 1).getString();
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Info;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Info;
		representation.addHyperText(TcpFlowMonLogPartCode.Connecting, $"Connecting to \e[34m$dstAddressString\e[m from \e[34m$srcAddressString\e[m...");
		break;

	case TcpFlowMonLogRecordCode.ConnectCompleted:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText(TcpFlowMonLogPartCode.ConnectCompleted, "ok");
		break;

	case TcpFlowMonLogRecordCode.ConnectionPickedUp:
		char const* addressString1 = ((io.SocketAddress const*) p).getString();
		char const* addressString2 = ((io.SocketAddress const*) p + 1).getString();
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;
		representation.addHyperText($"Picked up connection between \e[34m$addressString1\e[m and \e[34m$addressString2\e[m");
		break;

	case TcpFlowMonLogRecordCode.Disconnected:
		char const* addressString = ((io.SocketAddress const*) p).getString();
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText($"Disconnected by \e[34m$addressString\e");
		break;

	case TcpFlowMonLogRecordCode.OutOfOrderDataDropped:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Warning;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Error;
		representation.addHyperText($"Out-of-order segment(s), data dropped\e");
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................
