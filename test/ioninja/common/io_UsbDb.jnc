//..............................................................................
//
// USB ID database (vendor IDs & product IDs)
//

import "io_base.jncx"
import "io_MappedFile.jnc"
import "std_HashTable.jnc"

namespace io {

//..............................................................................

struct UsbProduct
{
	uint_t m_id;
	char const* m_name;
	UsbVendor* m_vendor;
}

//..............................................................................

class UsbVendor
{
protected:
	std.HashTable m_productMap;

public:
	uint_t m_id;
	char const* m_name;

public:
	UsbProduct* addProduct (
		uint_t id,
		char const* name
		);

	UsbProduct const* findProduct (uint_t productId) const
	{
		return m_productMap.findValue (productId);
	}
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

UsbProduct* UsbVendor.addProduct (
	uint_t id,
	char const* name
	)
{
	UsbProduct* product = new UsbProduct;
	product.m_id = id;
	product.m_name = name;
	product.m_vendor = this;
	m_productMap [id] = product;

	return product;
}

//..............................................................................

class UsbDb
{
protected:
	std.HashTable m_vendorMap;

public:
	bool errorcode load (char const* fileName);

	UsbVendor* addVendor (
		uint_t id,
		char const* name
		);

	UsbVendor const* findVendor (uint_t vendorId) const
	{
		return m_vendorMap.findValue (vendorId);
	}

	UsbProduct const* findProduct (
		uint_t vendorId,
		uint_t productId
		)
	{
		UsbVendor* vendor =  m_vendorMap.findValue (vendorId);
		return vendor ? vendor.findProduct (productId) : null;
	}
}

UsbVendor* UsbDb.addVendor (
	uint_t id,
	char const* name
	)
{
	UsbVendor* vendor = new UsbVendor;
	vendor.m_id = id;
	vendor.m_name = name;
	m_vendorMap [id] = vendor;

	return vendor;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool errorcode UsbDb.load (char const* fileName)
{
	m_vendorMap.clear ();

	disposable io.MappedFile file;
	file.open (fileName, io.FileOpenFlags.ReadOnly);

	size_t size = file.m_size;
	char const* p = file.view (0, size, false);
	char const* end = p + size;

	jnc.RegexState state;
	UsbVendor* vendor;

	while (p < end)
	{
		reswitch (state, p, end - p)
		{
		case r"(\h{4})\s+([^\n]+[^\s])[ \t\r]*\n":
			vendor = addVendor (
				strtol (state.m_subMatchArray [0].m_text,, 16),
				state.m_subMatchArray [1].m_text
				);
			break;

		case r"\t(\h{4})\s+([^\n]+[^\s])[ \t\r]*\n":
			if (!vendor)
			{
				std.setError ("invalid USB database file format");
				return false;
			}

			vendor.addProduct (
				strtol (state.m_subMatchArray [0].m_text,, 16),
				state.m_subMatchArray [1].m_text
				);
			break;

		case r"#[^\n]*\n":
			// ignore comment lines
			break;

		case r"[ \t\r]*\n":
			// ignore empty lines
			break;

		default:
			break2; // any other line stops parsing
		}

		p += state.m_consumedLength;
	}

	return true;
}

//..............................................................................

} // namespace io
