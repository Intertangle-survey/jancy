//..............................................................................
//
// Packet definitions for ModBus
//

namespace io {

alignment (1);

//..............................................................................

// ModBus protocol variations

enum ModBusProtocol: uint8_t
{
	Rtu,
	Ascii,
	Tcp,
	RtuIp,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// ModBus node roles

enum ModBusRole: uint8_t
{
	Master,
	Slave,
}

//..............................................................................

// function codes

enum ModBusFunc: uint8_t
{
	ReadCoils                  = 1,
	ReadDiscreteInputs         = 2,
	ReadHoldingRegisters       = 3,
	ReadInputRegisters         = 4,
	WriteCoil                  = 5,
	WriteRegister              = 6,
	ReadExceptionStatus	       = 7,
	Diagnostics                = 8,
	GetCommEventCounter        = 11,
	GetCommEventLog            = 12,
	WriteMultipleCoils         = 15,
	WriteMultipleRegisters     = 16,
	ReportServerId             = 17,
	ReadFileRecord             = 20,
	WriteFileRecord            = 21,
	MaskWriteRegister	       = 22,
	ReadWriteMultipleRegisters = 23,
	ReadFifoQueue              = 24,
	EncapsulatedInterface      = 43,

	ExceptionFlag              = 0x80,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

char const* getModBusFuncString (ModBusFunc func)
{
	static char const* stringTable [] =
	{
		"Unknown",                       // 0
		"Read Coils",                    // ReadCoils                  = 1,
		"Read Discrete Inputs",          // ReadDiscreteInputs         = 2,
		"Read Holding Registers",        // ReadHoldingRegisters       = 3,
		"Read Input Registers",          // ReadInputRegisters         = 4,
		"Write Coil",                    // WriteCoil                  = 5,
		"Write Register",                // WriteRegister              = 6,
		"Read Exception Status",         // ReadExceptionStatus        = 7,
		"Diagnostics",                   // Diagnostics                = 8,
		"Unknown",                       // 9
		"Unknown",                       // 10
		"Get Comm Event Counter",        // GetComEventCounter         = 11,
		"Get Comm Event Log",            // GetComEventLog             = 12,
		"Unknown",                       // 13
		"Unknown",                       // 14
		"Write Multiple Coils",          // WriteMultipleCoils         = 15,
		"Write Multiple Registers",      // WriteMultipleRegisters     = 16,
		"Report Server Id",              // ReportServerId             = 17,
		"Unknown",                       // 18
		"Unknown",                       // 19
		"Read File Record",              // ReadFileRecord             = 20,
		"Write File Record",             // WriteFileRecord            = 21,
		"Mask Write Register",           // MaskWriteRegister          = 22,
		"Read Write Multiple Registers", // ReadWriteMultipleRegisters = 23,
		"Read Fifo Queue",               // ReadFifoQueue              = 24,
	}

	return
		func < countof (stringTable) ?
			stringTable [func] :
		func == ModBusFunc.EncapsulatedInterface ?
			"Encapsulated Interface" :
		(func & ModBusFunc.ExceptionFlag) ?
			"Exception" :
			"Unknown";
}

//..............................................................................

// exception codes

enum ModBusExceptionCode: uint8_t
{
	IllegalFunction         = 1,
	IllegalDataAddress      = 2,
	IllegalDataValue        = 3,
	ServerDeviceFailure     = 4,
	Acknowledge             = 5,
	ServerDeviceBusy        = 6,
	MemoryParityError       = 8,
	GatewayPathUnavailable  = 10,
	GatewayDeviceNoResponse = 11,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

char const* getModBusFuncString (ModBusExceptionCode code)
{
	static char const* stringTable [] =
	{
		"Unknown",                    // 0
		"Illegal Function",           // IllegalFunction               = 1,
		"Illegal Data Address",       // IllegalDataAddress            = 2,
		"Illegal Data Value",         // IllegalDataValue              = 3,
		"Server Device Failure",      // ServerDeviceFailure           = 4,
		"Acknowledge",                // Acknowledge                   = 5,
		"Server Device Busy",         // ServerDeviceBusy              = 6,
		"Unknown",                    // 7
		"Memory Parity Error",        // MemoryParityError             = 8,
		"Unknown",                    // 9
		"Gateway Path Unavailable",   // GatewayPathUnavailable        = 10,
		"Gateway Device No Response", // GatewayTargetDeviceNoResponse = 11,
	}

	return code < countof (stringTable) ? stringTable [code] : "Unknown";
}

//..............................................................................

// particular function code PDUs

struct ModBusPduHdr
{
	io.ModBusFunc m_func;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusExceptionPdu: ModBusPduHdr
{
	ModBusExceptionCode m_exceptionCode;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusReadPdu: ModBusPduHdr
{
	bigendian uint16_t m_address;
	bigendian uint16_t m_count;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusReadReplyPdu: ModBusPduHdr
{
	uint8_t m_size;

	// followed by read data
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusWritePdu: ModBusPduHdr
{
	bigendian uint16_t m_address;
	bigendian uint16_t m_value;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusWriteMultiplePdu: ModBusPduHdr
{
	bigendian uint16_t m_address;
	bigendian uint16_t m_count;
	uint8_t m_size;

	// followed by write data
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusWriteMultipleReplyPdu: ModBusPduHdr
{
	bigendian uint16_t m_address;
	bigendian uint16_t m_count;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ModBusMaskWritePdu: ModBusPduHdr
{
	bigendian uint16_t m_address;
	bigendian uint16_t m_andMask;
	bigendian uint16_t m_orMask;
}

//..............................................................................

// calculates the actual size of PDU (-1 on error)

size_t getModBusPduSize (
	ModBusRole role,
	ModBusPduHdr const* pduHdr,
	size_t size
	)
{
	if (size < sizeof (ModBusPduHdr))
		return -1;

	switch (pduHdr.m_func)
	{
	case io.ModBusFunc.ReadCoils:
	case io.ModBusFunc.ReadDiscreteInputs:
	case io.ModBusFunc.ReadHoldingRegisters:
	case io.ModBusFunc.ReadInputRegisters:
		if (role == ModBusRole.Master)
			return size >= sizeof (ModBusReadPdu) ? sizeof (ModBusReadPdu) : -1;

		if (size < sizeof (ModBusReadReplyPdu))
			return -1;

		ModBusReadReplyPdu const* replyPdu = (ModBusReadReplyPdu const*) pduHdr;
		size_t pduSize = sizeof (ModBusReadReplyPdu) + replyPdu.m_size;

		return size >= pduSize ? pduSize : -1;

	case io.ModBusFunc.WriteCoil:
	case io.ModBusFunc.WriteRegister:
		return size >= sizeof (ModBusWritePdu) ? sizeof (ModBusWritePdu) : -1;

	case io.ModBusFunc.WriteMultipleCoils:
	case io.ModBusFunc.WriteMultipleRegisters:
		if (role == ModBusRole.Slave)
			return size >= sizeof (ModBusWriteMultipleReplyPdu) ? sizeof (ModBusWriteMultipleReplyPdu) : -1;

		if (size < sizeof (ModBusWriteMultiplePdu))
			return -1;

		ModBusWriteMultiplePdu const* pdu = (ModBusWriteMultiplePdu const*) pduHdr;
		size_t pduSize = sizeof (ModBusWriteMultiplePdu) + pdu.m_size;
		return size >= pduSize ? pduSize : -1;

	case io.ModBusFunc.MaskWriteRegister:
		return size >= sizeof (ModBusMaskWritePdu) ? sizeof (ModBusMaskWritePdu) : -1;

	case io.ModBusFunc.ReadExceptionStatus:
	case io.ModBusFunc.Diagnostics:
	case io.ModBusFunc.GetCommEventCounter:
	case io.ModBusFunc.GetCommEventLog:
	case io.ModBusFunc.ReportServerId:
	case io.ModBusFunc.ReadFileRecord:
	case io.ModBusFunc.WriteFileRecord:
	case io.ModBusFunc.ReadWriteMultipleRegisters:
	case io.ModBusFunc.ReadFifoQueue:
	case io.ModBusFunc.EncapsulatedInterface:
		return -1; // not yet supported

	default:
		return (pduHdr.m_func & ModBusFunc.ExceptionFlag) && size >= sizeof (ModBusExceptionPdu) ?
			sizeof (ModBusExceptionPdu) :
			-1;
	}
}

//..............................................................................

// ModBus RTU

struct ModBusRtuAduHdr
{
	uint8_t m_deviceAddress;

	// followed by PDU and CRC16 checksum
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// calculates the actual size of ModBus RTU ADU (-1 on error)

size_t getModBusRtuAduSize (
	ModBusRole role,
	ModBusRtuAduHdr const* aduHdr,
	size_t size
	)
{
	if (size < sizeof (ModBusRtuAduHdr))
		return -1;

	ModBusPduHdr const* pduHdr = (ModBusPduHdr const*) (aduHdr + 1);
	size_t pduSize = getModBusPduSize (role, pduHdr, size - sizeof (ModBusRtuAduHdr));
	if (pduSize == -1)
		return -1;

	size_t aduSize = pduSize + sizeof (uint8_t) + sizeof (uint16_t);
	return size >= aduSize ? aduSize : -1;
}

//..............................................................................

} // namespace io {
