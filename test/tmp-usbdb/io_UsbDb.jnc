//..............................................................................
//
// USB ID database (vendor IDs & product IDs)
//

import "io_base.jncx"
import "io_MappedFile.jnc"
import "std_HashTable.jnc"

//..............................................................................

struct UsbProduct
{
	uint_t m_id;
	char const* m_name;
	UsbVendor* m_vendor;
}

//..............................................................................

class UsbVendor
{
protected:
	std.VariantHashTable m_productMap;

public:
	uint_t m_id;
	char const* m_name;

public:
	UsbProduct* addProduct (
		uint_t id,
		char const* name
		);

	UsbProduct const* findProduct (uint_t productId) const
	{
		return m_productMap.find (productId);
	}
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

UsbProduct* UsbVendor.addProduct (
	uint_t id,
	char const* name
	)
{
	UsbProduct* product = new UsbProduct;
	product.m_id = id;
	product.m_name = name;
	product.m_vendor = this;
	m_productMap.insert (id, product);

	return product;
}

//..............................................................................

class UsbDb
{
protected:
	class Parser
	{
	protected:
		UsbDb* m_db;
		UsbVendor* m_vendor;

	public:
		bool errorcode parse (
			UsbDb* db,
			void const* p,
			size_t size
			);

	protected:
		jnc.AutomatonResult automaton scanner (jnc.Recognizer* recognizer);
	}

protected:
	std.VariantHashTable m_vendorMap;

public:
	bool errorcode load (char const* fileName);

	UsbVendor* addVendor (
		uint_t id,
		char const* name
		);

	UsbVendor const* findVendor (uint_t vendorId) const
	{
		return m_vendorMap.find (vendorId);
	}

	UsbProduct const* findProduct (
		uint_t vendorId,
		uint_t productId
		)
	{
		UsbVendor* vendor =  m_vendorMap.find (vendorId);
		return vendor ? vendor.findProduct (productId) : null;
	}
}

UsbVendor* UsbDb.addVendor (
	uint_t id,
	char const* name
	)
{
	UsbVendor* vendor = new UsbVendor;
	vendor.m_id = id;
	vendor.m_name = name;
	m_vendorMap.insert (id, vendor);

	return vendor;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bool errorcode UsbDb.load (char const* fileName)
{
	io.MappedFile file;
	file.open (fileName, io.FileOpenFlags.ReadOnly);

	size_t size = file.m_size;
	char const* p = file.view (0, size, false);

	Parser parser;
	return parser.parse (this, p, size);
}

bool errorcode UsbDb.Parser.parse (
	UsbDb* db,
	void const* p,
	size_t size
	)
{
	m_db = db;
	m_vendor = null;

	jnc.Recognizer recognizer (scanner);
	return recognizer.recognize (p, size);
}

jnc.AutomatonResult automaton UsbDb.Parser.scanner (jnc.Recognizer* recognizer)
{
	%% (\h{4}) \s+ ([^\n]+) \n
		m_vendor = m_db.addVendor (
			strtol (recognizer.m_subLexemeArray [0].m_text,, 16),
			recognizer.m_subLexemeArray [1].m_text
			);

		printf ("Vendor: ID: %04x %s\n", m_vendor.m_id, m_vendor.m_name);

	%% \t (\h{4}) \s+ ([^\n]+) \n
		if (m_vendor)
		{
			UsbProduct* product = m_vendor.addProduct (
				strtol (recognizer.m_subLexemeArray [0].m_text,, 16),
				recognizer.m_subLexemeArray [1].m_text
				);

			printf ("\tProduct: ID: %04x %s\n", product.m_id, product.m_name);
		}

	%% '#' [^\n]* \n
		// ignore comment lines

	%% [ \t\r]* \n
		// ignore empty lines

	%% [^\n]+ \n
		// any other line stops
		printf ("non-VID/PID: %s\n", recognizer.m_lexeme.m_text);
		return jnc.AutomatonResult.Stop;

}

//..............................................................................

int main ()
{
	printf ("parsing usb.ids...\n");

	UsbDb usbDb;
	usbDb.load ("/home/vladimir/Projects/ioninja/jancy/test/tmp-usbdb/usb.ids");

	printf ("done.\n");
	return 0;

catch:
	printf ($"error: $!\n");
	return -1;
}
