//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace jnc {

//! \addtogroup automaton
//! @{

///+++

//..............................................................................

///; static char automatonResultTypeSrc [] =

enum AutomatonResult
{
	Error    = -1,
	Continue = 0,
	Stop     = 1,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char recognizerTypeSrc [] =

class Recognizer
{
	typedef AutomatonResult automaton AutomatonFunc (Recognizer* recognizer);

protected:
	uintptr_t m_internalState;
	size_t m_stateCount;
	uint_t thin* m_stateFlagTable;
	uintptr_t thin* m_transitionTable; // m_stateCount x 256
	uintptr_t m_stateId;
	uintptr_t m_lastAcceptStateId;
	size_t m_lastAcceptLexemeLength;

public:
	AutomatonFunc* autoget property m_automatonFunc;
	size_t autoget property m_lexemeLengthLimit;
	size_t autoget property m_currentOffset;

	char const* readonly m_lexeme;
	size_t readonly m_lexemeOffset;
	size_t readonly m_lexemeLength;

public:
	construct (AutomatonFunc* automatonFunc = null);

	// incremental recognition

	reset ();

	bool errorcode write (
		char const* p,
		size_t length = -1
		);

	bool errorcode eof ();

	// recognition in one-go

	bool errorcode recognize (
		char const* p,
		size_t length = -1
		)
	{
		reset ();
		return try write (p, length) && try eof ();
	}

	bool errorcode recognize (
		AutomatonFunc* automatonFunc,
		char const* p,
		size_t length = -1
		)
	{
		m_automatonFunc = automatonFunc;
		return try recognize (p, length);
	}
}

///;

//..............................................................................

///---

//! @}

} // namespace jnc

/*!

\defgroup automaton Automatons & Recognizers

*/
