//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "jnc_ct_Decl.llk";
import "jnc_ct_Expr.llk";
import "jnc_ct_Expr_0.llk";
import "jnc_ct_Stmt.llk";
import "jnc_ct_Reactor.llk";

import "jnc_ct_DeclarationSpecifier.llk";
import "jnc_ct_Declarator.llk";
import "jnc_ct_NamedTypeSpecifier.llk";

//..............................................................................

lookahead = 2;

start
nullable
compilation_unit
	: global_declaration*
	;

//..............................................................................

ParserClassName = Parser;

Includes
{
	#include "jnc_ct_Lexer.h"
	#include "jnc_ct_Module.h"
	#include "jnc_ct_Decl.h"
}

CppIncludes
{
	#include "jnc_ct_Parser.llk.h"
}

Members
{
	enum Stage
	{
		Stage_Pass1,    // global declarations (before linkage)
		Stage_Pass2,    // statements and expressions (after linkage & calclayout)
		Stage_Reaction, // compiling the 'reaction' method of a reactor (like Pass2, but with implicit bindings)
	};

	enum Flag
	{
		Flag_ConstExpression = 0x01,
	};

	enum AssignKind
	{
		AssignKind_Normal,
		AssignKind_BinOp,
	};

	struct CurlyInitializer
	{
		Value m_targetValue;
		Value m_memberValue;
		size_t m_index;
		size_t m_count;

		CurlyInitializer()
		{
			m_index = 0;
			m_count = 0;
		}
	};

	struct FmtSite: sl::ListLink
	{
		size_t m_offset;
		size_t m_index;
		Value m_value;
		sl::String m_fmtSpecifierString;

		FmtSite()
		{
			m_offset = 0;
			m_index = 0;
		}
	};

	struct Literal
	{
		sl::Array<char> m_binData;
		sl::List<FmtSite> m_fmtSiteList;
		bool m_isZeroTerminated;

		Literal()
		{
			m_isZeroTerminated = false;
		}
	};

	struct Literal_0
	{
		size_t m_length;
		bool m_isZeroTerminated;
		bool m_isFmtLiteral;

		Literal_0 ()
		{
			m_length = 0;
			m_isZeroTerminated = false;
			m_isFmtLiteral = false;
		}
	};

	struct StmtPass1
	{
		sl::BoxList<Token> m_tokenList;
		Token* m_scopeAnchorToken;

		StmtPass1 ()
		{
			m_scopeAnchorToken = NULL;
		}
	};

	Module* m_module;
	Stage m_stage;
	uint_t m_flags;
	size_t m_fieldAlignment;
	size_t m_defaultFieldAlignment;

	StorageKind m_storageKind;
	AccessKind m_accessKind;
	AttributeBlock* m_attributeBlock;

	ModuleItem* m_lastDeclaredItem;
	sl::Array<TypeSpecifier*> m_typeSpecifierStack;
	Declarator* m_topDeclarator; // orphan declarators affect import type resolution

	FunctionType* m_lastPropertyGetterType;
	uint_t m_lastPropertyTypeModifiers;

	dox::Parser m_doxyParser;

	ReactorClassType* m_reactorType;
	Value m_reactionIdxArgValue;
	size_t m_reactionIdx;

	DerivableType* m_constructorType;
	Property* m_constructorProperty;

	Value m_curlyInitializerTargetValue;

	size_t m_dynamicLibFunctionCount;

	// saved attributes

	Value m_expressionValue;
	sl::BoxList<Value> m_expressionValueList;
	NamedType* m_namedType;
	QualifiedName m_qualifiedName;
}

Members2
{
	Parser(Module* module);

	bool
	parseTokenList(
		SymbolKind symbol,
		const sl::ConstBoxList<Token>& tokenList,
		bool isBuildingAst = false
		);

	NamedImportType*
	getNamedImportType(
		const QualifiedName& name,
		const Token::Pos& pos
		);

	sl::String
	getQualifiedTypeNameString(
		size_t baseTypeIdx,
		const QualifiedName& name
		);

	Type*
	findType(
		size_t baseTypeIdx,
		const QualifiedName& name,
		const Token::Pos& pos
		);

	Type*
	getType(
		size_t baseTypeIdx,
		const QualifiedName& name,
		const Token::Pos& pos
		);

	DerivableType*
	findBaseType(size_t baseTypeIdx);

	DerivableType*
	getBaseType(size_t baseTypeIdx);

	bool
	getBaseType(
		size_t baseTypeIdx,
		Value* resultValue
		);

	bool
	setSetAsType(Type* type);

	bool
	setStorageKind(StorageKind storageKind);

	bool
	setAccessKind(AccessKind accessKind);

	void
	postDeclaratorName(Declarator* declarator);

	void
	postDeclarator(Declarator* declarator);

	void
	pushTypeSpecifier(TypeSpecifier* typeSpecifier)
	{
		m_typeSpecifierStack.append(typeSpecifier);
	}

	TypeSpecifier*
	getTypeSpecifier()
	{
		return m_typeSpecifierStack.getBack();
	}

	void
	popTypeSpecifier(TypeSpecifier* typeSpecifier)
	{
		m_typeSpecifierStack.pop();
	}

	bool
	isTypeSpecified();

	void
	preDeclaration();

	bool
	bodylessDeclaration();

	bool
	setDeclarationBody(sl::BoxList<Token>* tokenList);

	void
	assignDeclarationAttributes(
		ModuleItem* item,
		ModuleItemDecl* decl,
		const Token::Pos& pos,
		AttributeBlock* attributeBlock = NULL,
		dox::Block* doxyBlock = NULL
		);

	void
	assignDeclarationAttributes(
		ModuleItem* item,
		ModuleItemDecl* itemDecl,
		Declarator* declarator
		)
	{
		assignDeclarationAttributes(item, itemDecl, declarator->m_pos, declarator->m_attributeBlock, declarator->m_doxyBlock);
	}

	GlobalNamespace*
	getGlobalNamespace(
		GlobalNamespace* parentNamespace,
		const sl::StringRef& name,
		const Token::Pos& pos
		);

	GlobalNamespace*
	openGlobalNamespace(
		const QualifiedName& name,
		const Token::Pos& pos
		);

	ExtensionNamespace*
	openExtensionNamespace(
		const sl::StringRef& name,
		Type* type,
		const Token::Pos& pos
		);

	bool
	useNamespace(
		const sl::BoxList<QualifiedName>& nameList,
		NamespaceKind namespaceKind,
		const Token::Pos& pos
		);

	AttributeBlock*
	popAttributeBlock();

	bool
	declare(Declarator* declarator);

	bool
	declareInReaction(Declarator* declarator);

	bool
	declareTypedef(
		Declarator* declarator,
		Type* type
		);

	bool
	declareAlias(
		Declarator* declarator,
		Type* type,
		uint_t ptrTypeFlags
		);

	bool
	declareFunction(
		Declarator* declarator,
		FunctionType* type
		);

	bool
	declareProperty(
		Declarator* declarator,
		PropertyType* type,
		uint_t flags
		);

	bool
	declareData(
		Declarator* declarator,
		Type* type,
		uint_t ptrTypeFlags
		);

	bool
	declareUnnamedStructOrUnion(DerivableType* type);

	bool
	declareReactor(
		Declarator* declarator,
		uint_t ptrTypeFlags
		);

	FunctionArg*
	createFormalArg(
		DeclFunctionSuffix* argSuffix,
		Declarator* declarator
		);

	bool
	addEnumFlag(
		uint_t* flags,
		EnumTypeFlag flag
		);

	EnumType*
	createEnumType(
		const sl::StringRef& name,
		Type* baseType,
		uint_t flags
		);

	EnumConst*
	createEnumConst(
		EnumType* type,
		const sl::StringRef& name,
		const Token::Pos& pos,
		sl::BoxList<Token>* initializer
		);

	StructType*
	createStructType(
		const sl::StringRef& name,
		sl::BoxList<Type*>* baseTypeList,
		size_t fieldAlignment,
		uint_t flags
		);

	UnionType*
	createUnionType(
		const sl::StringRef& name,
		size_t fieldAlignment,
		uint_t flags
		);

	ClassType*
	createClassType(
		const sl::StringRef& name,
		sl::BoxList<Type*>* baseTypeList,
		size_t fieldAlignment,
		uint_t flags
		);

	ClassType*
	createDynamicLibType(const sl::StringRef& name);

	bool
	finalizeDynamicLibType();

	Property*
	createProperty(Declarator* decl);

	PropertyTemplate*
	createPropertyTemplate();

	bool
	finalizeLastProperty(bool hasBody);

	bool
	parseLastPropertyBody(const sl::ConstBoxList<Token>& body);

	bool
	newOperator_0(
		Type* type,
		Value* resultValue
		);

	bool
	addReactionBinding(const Value& value);

	bool
	resetReactionBindings();

	bool
	reactorOnEventStmt(
		const sl::ConstBoxList<Value>& valueList,
		Declarator* declarator,
		sl::BoxList<Token>* tokenList
		);

	bool
	initializeReaction();

	bool
	finalizeReaction();

	bool
	callBaseTypeMemberConstructor(
		const QualifiedName& name,
		sl::BoxList<Value>* argList
		);

	bool
	callBaseTypeConstructor(
		size_t baseTypeIdx,
		sl::BoxList<Value>* argList
		);

	bool
	callBaseTypeConstructor(
		Type* type,
		sl::BoxList<Value>* argList
		);

	bool
	callBaseTypeConstructorImpl(
		BaseTypeSlot* baseTypeSlot,
		sl::BoxList<Value>* argList
		);

	bool
	callFieldConstructor(
		StructField* field,
		sl::BoxList<Value>* argList
		);

	bool
	finalizeBaseTypeMemberConstructBlock();

	bool
	lookupIdentifier(
		const sl::StringRef& name,
		const Token::Pos& pos,
		Value* value
		);

	bool
	lookupIdentifierType(
		const sl::StringRef& name,
		const Token::Pos& pos,
		Value* value
		);

	bool
	prepareCurlyInitializerNamedItem(
		CurlyInitializer* initializer,
		const sl::StringRef& name
		);

	bool
	prepareCurlyInitializerIndexedItem(CurlyInitializer* initializer);

	bool
	skipCurlyInitializerItem(CurlyInitializer* initializer);

	bool
	assignCurlyInitializerItem(
		CurlyInitializer* initializer,
		const Value& value
		);

	bool
	addFmtSite(
		Literal* literal,
		const sl::StringRef& string,
		const Value& value,
		bool isIndex,
		const sl::StringRef& fmtSpecifierString
		);

	bool
	finalizeLiteral(
		Literal* literal,
		sl::BoxList<Value>* argValueList,
		Value* resultValue
		);

	bool
	finalizeLiteral_0(
		Literal_0* literal,
		Value* resultValue
		);

	void
	appendFmtLiteralRawData(
		const Value& fmtLiteralValue,
		const void* p,
		size_t size
		);

	bool
	appendFmtLiteralValue(
		const Value& fmtLiteralValue,
		const Value& rawSrcValue,
		const sl::StringRef& fmtSpecifierString
		);

	bool
	appendFmtLiteralBinValue(
		const Value& fmtLiteralValue,
		const Value& rawSrcValue
		);

	bool
	finalizeReSwitchCaseLiteral(
		sl::StringRef* data,
		const Value& value,
		bool isZeroTerminated
		);

	BasicBlock*
	assertCondition(const sl::BoxList<Token>& tokenList);

	bool
	finalizeAssertStmt(
		const sl::BoxList<Token>& conditionTokenList,
		const Value& messageValue,
		BasicBlock* continueBlock
		);

	static
	void
	addScopeAnchorToken(
		StmtPass1* stmt,
		const Token& token
		);
}

OpenNamespace
{.
	namespace jnc {
	namespace ct {
.}

CloseNamespace
{.
	} // namespace ct
	} // namespace jnc
.}

//..............................................................................
