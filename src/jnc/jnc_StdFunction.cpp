#include "pch.h"
#include "jnc_StdFunction.h"
#include "jnc_Module.h"

namespace jnc {

//.............................................................................

const char*
getStdFunctionName (StdFunction stdFunction)
{
	const char* nameTable [StdFunction__Count] =
	{
		NULL,                  // StdFunction_DynamicSizeOf,
		NULL,                  // StdFunction_DynamicCountOf,
		NULL,                  // StdFunction_DynamicCastDataPtr,
		NULL,                  // StdFunction_DynamicCastClassPtr,
		NULL,                  // StdFunction_DynamicCastVariant,
		NULL,                  // StdFunction_StrengthenClassPtr,

		NULL,                  // StdFunction_PrimeStaticClass,
		NULL,                  // StdFunction_TryAllocateClass,
		NULL,                  // StdFunction_AllocateClass,
		NULL,                  // StdFunction_TryAllocateData,
		NULL,                  // StdFunction_AllocateData,
		NULL,                  // StdFunction_TryAllocateArray,
		NULL,                  // StdFunction_AllocateArray,
		NULL,                  // StdFunction_CreateDataPtrValidator,
		
		"collectGarbage",      // StdFunction_RunGc,
		"getCurrentThreadId",  // StdFunction_GetCurrentThreadId,
		"createThread",        // StdFunction_CreateThread,
		"sleep",               // StdFunction_Sleep,
		"getTimestamp",        // StdFunction_GetTimestamp,
		"format",              // StdFunction_Format,
		"strlen",              // StdFunction_StrLen,
		"strcmp",              // StdFunction_StrCmp,
		"stricmp",             // StdFunction_StriCmp,
		"strchr",              // StdFunction_StrChr,
		"strcat",              // StdFunction_StrCat,
		"strdup",              // StdFunction_StrDup,
		"memcmp",              // StdFunction_MemCmp,
		"memchr",              // StdFunction_MemChr,
		"memcpy",              // StdFunction_MemCpy,
		"memset",              // StdFunction_MemSet,
		"memcat",              // StdFunction_MemCat,
		"memdup",              // StdFunction_MemDup,
		"rand",                // StdFunction_Rand,
		"printf",              // StdFunction_Printf,
		"atoi",                // StdFunction_Atoi,
		NULL,                  // StdFunction_GetTls,

		NULL,                  // StdFunction_AppendFmtLiteral_a,
		NULL,                  // StdFunction_AppendFmtLiteral_p,
		NULL,                  // StdFunction_AppendFmtLiteral_i32,
		NULL,                  // StdFunction_AppendFmtLiteral_ui32,
		NULL,                  // StdFunction_AppendFmtLiteral_i64,
		NULL,                  // StdFunction_AppendFmtLiteral_ui64,
		NULL,                  // StdFunction_AppendFmtLiteral_f,
		NULL,                  // StdFunction_AppendFmtLiteral_v,
		NULL,                  // StdFunction_AppendFmtLiteral_s,
		NULL,                  // StdFunction_AppendFmtLiteral_sr,
		NULL,                  // StdFunction_AppendFmtLiteral_cb,
		NULL,                  // StdFunction_AppendFmtLiteral_cbr,
		NULL,                  // StdFunction_AppendFmtLiteral_br,
		NULL,                  // StdFunction_SimpleMulticastCall,
		
		"throw",               // StdFunction_Throw,
		"getLastError",        // StdFunction_GetLastError,
		"setPosixError",       // StdFunction_SetPosixError,
		"setStringError",      // StdFunction_SetStringError,
		"assertionFailure",    // StdFunction_AssertionFailure,
		"addStaticDestructor", // StdFunction_AddStaticDestructor,
		"addStaticClassDestructor", // StdFunction_AddStaticClassDestructor,
		
		NULL,                  // StdFunction_TryCheckDataPtrRangeDirect,
		NULL,                  // StdFunction_CheckDataPtrRangeDirect,
		NULL,                  // StdFunction_TryCheckDataPtrRangeIndirect,
		NULL,                  // StdFunction_CheckDataPtrRangeIndirect,
		NULL,                  // StdFunction_TryCheckNullPtr,
		NULL,                  // StdFunction_CheckNullPtr,
		NULL,                  // StdFunction_TryLazyGetLibraryFunction,
		NULL,                  // StdFunction_LazyGetLibraryFunction,

		NULL,                  // StdFunction_LlvmMemcpy,
		NULL,                  // StdFunction_LlvmMemmove,
		NULL,                  // StdFunction_LlvmMemset,
	};

	ASSERT ((size_t) stdFunction < StdFunction__Count);
	return nameTable [stdFunction];
}

const StdItemSource*
getStdFunctionSource (StdFunction stdFunction)
{
	#include "jnc_StdFunctions.jnc.cpp"

	static StdItemSource sourceTable [StdFunction__Count] =
	{
		{                                        // StdFunction_DynamicSizeOf,
			dynamicSizeOfSrc,
			lengthof (dynamicSizeOfSrc),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_DynamicCountOf,
			dynamicCountOfSrc,
			lengthof (dynamicCountOfSrc),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_DynamicCastDataPtr,
			dynamicCastDataPtrSrc,
			lengthof (dynamicCastDataPtrSrc),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_DynamicCastClassPtr,
			dynamicCastClassPtrSrc,
			lengthof (dynamicCastClassPtrSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_DynamicCastVariant,
			dynamicCastVariantSrc,
			lengthof (dynamicCastVariantSrc),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_StrengthenClassPtr,
			strengthenClassPtrSrc,
			lengthof (strengthenClassPtrSrc),
			StdNamespace_Internal,
		},

		{ NULL },                                // StdFunction_PrimeStaticClass,
		{ NULL },                                // StdFunction_TryAllocateClass,
		{ NULL },                                // StdFunction_AllocateClass,
		{ NULL },                                // StdFunction_TryAllocateData,
		{ NULL },                                // StdFunction_AllocateData,
		{ NULL },                                // StdFunction_TryAllocateArray,
		{ NULL },                                // StdFunction_AllocateArray,
		{ NULL },                                // StdFunction_CreateDataPtrValidator,

		{                                        // StdFunction_CollectGarbage,
			collectGarbageSrc,
			lengthof (collectGarbageSrc),
			StdNamespace_Jnc,
		},
		{                                        // StdFunction_GetCurrentThreadId,
			getCurrentThreadIdSrc,
			lengthof (getCurrentThreadIdSrc),
			StdNamespace_Jnc,
		},
		{                                        // StdFunction_CreateThread,
			createThreadSrc,
			lengthof (createThreadSrc),
			StdNamespace_Jnc,
		},
		{                                        // StdFunction_Sleep,
			sleepSrc,
			lengthof (sleepSrc),
			StdNamespace_Jnc,
		},
		{                                        // StdFunction_GetTimestamp,
			getTimestampSrc,
			lengthof (getTimestampSrc),
			StdNamespace_Jnc,
		},
		{                                        // StdFunction_Format,
			formatSrc,
			lengthof (formatSrc),
			StdNamespace_Jnc,
		},
		{                                        // StdFunction_StrLen,
			strlenSrc,
			lengthof (strlenSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_StrCmp,
			strcmpSrc,
			lengthof (strcmpSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_StriCmp,
			stricmpSrc,
			lengthof (stricmpSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_StrChr,
			strchrSrc,
			lengthof (strchrSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_StrCat,
			strcatSrc,
			lengthof (strcatSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_StrDup,
			strdupSrc,
			lengthof (strdupSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_MemCmp,
			memcmpSrc,
			lengthof (memcmpSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_MemChr,
			memchrSrc,
			lengthof (memchrSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_MemCpy,
			memcpySrc,
			lengthof (memcpySrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_MemSet,
			memsetSrc,
			lengthof (memsetSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_MemCat,
			memcatSrc,
			lengthof (memcatSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_MemDup,
			memdupSrc,
			lengthof (memdupSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_Rand,
			randSrc,
			lengthof (randSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_Printf,
			printfSrc,
			lengthof (printfSrc),
			StdNamespace_Global,
		},
		{                                        // StdFunction_Atoi,
			atoiSrc,
			lengthof (atoiSrc),
			StdNamespace_Global,
		},
		{ NULL },                                // StdFunction_GetTls,
		{                                        // StdFunction_AppendFmtLiteral_a,
			appendFmtLiteralSrc_a,
			lengthof (appendFmtLiteralSrc_a),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_AppendFmtLiteral_p,
			appendFmtLiteralSrc_p,
			lengthof (appendFmtLiteralSrc_p),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_AppendFmtLiteral_i32,
			appendFmtLiteralSrc_i32,
			lengthof (appendFmtLiteralSrc_i32),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_AppendFmtLiteral_ui32,
			appendFmtLiteralSrc_ui32,
			lengthof (appendFmtLiteralSrc_ui32),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_AppendFmtLiteral_i64,
			appendFmtLiteralSrc_i64,
			lengthof (appendFmtLiteralSrc_i64),
			StdNamespace_Internal,
		},
		{                                        // StdFunction_AppendFmtLiteral_ui64,
			appendFmtLiteralSrc_ui64,
			lengthof (appendFmtLiteralSrc_ui64),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_f,
			appendFmtLiteralSrc_f,
			lengthof (appendFmtLiteralSrc_f),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_v,
			appendFmtLiteralSrc_v,
			lengthof (appendFmtLiteralSrc_v),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_s,
			appendFmtLiteralSrc_s,
			lengthof (appendFmtLiteralSrc_s),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_sr,
			appendFmtLiteralSrc_sr,
			lengthof (appendFmtLiteralSrc_sr),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_cb,
			appendFmtLiteralSrc_cb,
			lengthof (appendFmtLiteralSrc_cb),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_cbr,
			appendFmtLiteralSrc_cbr,
			lengthof (appendFmtLiteralSrc_cbr),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AppendFmtLiteral_br,
			appendFmtLiteralSrc_br,
			lengthof (appendFmtLiteralSrc_br),
			StdNamespace_Internal,
		},
		{ NULL },                               // StdFunction_SimpleMulticastCall,
		{                                       // StdFunction_Throw,
			throwSrc,
			lengthof (throwSrc),
			StdNamespace_Jnc,
		},
		{                                       // StdFunction_GetLastError,
			getLastErrorSrc,
			lengthof (getLastErrorSrc),
			StdNamespace_Jnc,
		},
		{                                       // StdFunction_SetPosixError,
			setPosixErrorSrc,
			lengthof (setPosixErrorSrc),
			StdNamespace_Jnc,
		},
		{                                       // StdFunction_SetStringError,
			setStringErrorSrc,
			lengthof (setStringErrorSrc),
			StdNamespace_Jnc,
		},
		{                                       // StdFunction_AssertionFailure,
			assertionFailureSrc,
			lengthof (assertionFailureSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AddStaticDestructor,
			addStaticDestructorSrc,
			lengthof (addStaticDestructorSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_AddStaticClassDestructor,
			addStaticClassDestructorSrc,
			lengthof (addStaticClassDestructorSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_TryCheckDataPtrRangeDirect,
			tryCheckDataPtrRangeDirectSrc,
			lengthof (tryCheckDataPtrRangeDirectSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_CheckDataPtrRangeDirect,
			checkDataPtrRangeDirectSrc,
			lengthof (checkDataPtrRangeDirectSrc),
			StdNamespace_Internal,
		},
		{ NULL },                               // StdFunction_TryCheckDataPtrRangeIndirect,
		{ NULL },                               // StdFunction_CheckDataPtrRangeIndirect,
		{                                       // StdFunction_TryCheckNullPtr,
			tryCheckNullPtrSrc,
			lengthof (tryCheckNullPtrSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_CheckNullPtr,
			checkNullPtrSrc,
			lengthof (checkNullPtrSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_TryLazyGetLibraryFunctionAddr,
			tryLazyGetLibraryFunctionSrc,
			lengthof (tryLazyGetLibraryFunctionSrc),
			StdNamespace_Internal,
		},
		{                                       // StdFunction_LazyGetLibraryFunctionAddr,
			lazyGetLibraryFunctionSrc,
			lengthof (lazyGetLibraryFunctionSrc),
			StdNamespace_Internal,
		},
		{ NULL },                              // StdFunction_LlvmMemcpy
		{ NULL },                              // StdFunction_LlvmMemmove
		{ NULL },                              // StdFunction_LlvmMemset
	};

	ASSERT ((size_t) stdFunction < StdFunction__Count);
	return &sourceTable [stdFunction];
}

//.............................................................................
	
ModuleItem*
LazyStdFunction::getActualItem ()
{
	return m_module->m_functionMgr.getStdFunction (m_func);
}

//.............................................................................

} // namespace jnc {
