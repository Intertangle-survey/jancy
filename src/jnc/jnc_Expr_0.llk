//.............................................................................

start
expression_save_value_0
	:	expression_0
			{
				m_expressionValue = $1.m_value;
			}
	;

class
{
	Value m_value;	
}
start
expression_0
	:	conditional_expr_0 <&$.m_value>
	;

class 
{
	Value m_value;
}
nullable
expression_or_empty_0
	:	conditional_expr_0 <&$.m_value>
	|	epsilon
	;

class
{
	rtl::BoxList <Value> m_valueList;
}
expression_list_0
	:	expression_0 
			{
				$.m_valueList.insertTail ($1.m_value);
			}
		(',' expression_0 $e2
			{
				$.m_valueList.insertTail ($e2.m_value);
			}
		)*
	;

// expression_or_empty_list might seem overcomplicated but
// this is done to avoid having a singe EValue_Void in case of empty list

class
{
	rtl::BoxList <Value> m_valueList;
}
nullable
expression_or_empty_list_0
	:	expression_0
			{
				$.m_valueList.insertTail ($1.m_value);
			}
		(',' expression_or_empty_0 $e2
			{
				$.m_valueList.insertTail ($e2.m_value);
			}
		)*
	|		{
				$.m_valueList.insertTail (Value ());
			}	
		(',' expression_or_empty_0 $e2
			{
				$.m_valueList.insertTail ($e2.m_value);
			}
		)+
	|	epsilon 
	;

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

conditional_expr_0 <Value* $value>
	local 
	{
		Value $trueValue;
		Value $falseValue;
	}
	:	logical_or_expr_0 <$value> 
		('?' conditional_expr_0 <&$trueValue> ':' conditional_expr_0 <&$falseValue>
			{
				return m_module->m_operatorMgr.getConditionalOperatorResultType ($trueValue, $falseValue, $value);
			}
		)?
	;

logical_or_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	logical_and_expr_0 <$value> 
		(TokenKind_LogOr logical_and_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_LogAnd, $value, $opValue2);
			}
		)*
	;

logical_and_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	inclusive_or_expr_0 <$value> 
		(TokenKind_LogAnd inclusive_or_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_LogOr, $value, $opValue2);
			}
		)*
	;

inclusive_or_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	exclusive_or_expr_0 <$value> 
		('|' exclusive_or_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_BwOr, $value, $opValue2);
			}
		)*
	;

exclusive_or_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	and_expr_0 <$value> 
		('^' and_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_BwXor, $value, $opValue2);
			}
		)*
	;

and_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	equality_expr_0 <$value> 
		('&' equality_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_BwAnd, $value, $opValue2);
			}
		)*
	;

equality_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	relational_expr_0 <$value> 
		(equality_operator $o relational_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType ($o.m_opKind, $value, $opValue2);
			}
		)*
	;

relational_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	shift_expr_0 <$value> 
		(relational_operator $o shift_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType ($o.m_opKind, $value, $opValue2);
			}
		)*
	;

shift_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	additive_expr_0 <$value> 
		(shift_operator $o additive_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType ($o.m_opKind, $value, $opValue2);
			}
		)*
	;

additive_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	multiplicative_expr_0 <$value> 
		(additive_operator $o multiplicative_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType ($o.m_opKind, $value, $opValue2);
			}
		)*
	;

multiplicative_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	at_expr_0 <$value> 
		(multiplicative_operator $o at_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType ($o.m_opKind, $value, $opValue2);
			}
		)*
	;

at_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	assignment_expr_0 <$value> 
		('@' assignment_expr_0 <&$opValue2>
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_At, $value, $opValue2);
			}
		)*
	;

assignment_expr_0 <Value* $value>
	local
	{
		Value $opValue2;
	}
	:	unary_expr_0 <$value> 
		(
				{
					if (m_stage == StageKind_ReactorScan)
						m_reactorBindableTypeCount = 0; // reset on assignment
				}
			assignment_operator $o conditional_expr_0 <&$opValue2>
				{
					return m_module->m_operatorMgr.getBinaryOperatorResultType ($o.m_opKind, $value, $opValue2);
				}
		)?
	;

unary_expr_0 <Value* $value>
	:	postfix_expr_0 <$value> 
	|	unary_operator_expr_0 <$value> 
	;

unary_operator_expr_0 <Value* $value>
	leave 
	{
		if (m_stage == StageKind_ReactorScan && isBindableType ($value->getType ()))
			m_reactorBindableTypeCount++;
	}
	:	'+' unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_Plus, $value);
			}
	|	'-' unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_Minus, $value);
			}
	|	'~' unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_BwNot, $value);
			}
	|	'&' unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_Addr, $value);
			}
	|	'*' unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_Indir, $value);
			}
	|	'!' unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_LogNot, $value);
			}
	|	TokenKind_Inc unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_PreInc, $value);
			}
	|	TokenKind_Dec unary_expr_0 <$value> 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_PreDec, $value);
			}
	|	TokenKind_Try unary_expr_0 <$value> 
			{
				// try operator does not change type of value				
			}
	|	TokenKind_SizeOf '(' type_name_or_expr $t ')'
			{
				$value->setType (TypeKind_SizeT);
			}
	|	TokenKind_CountOf '(' type_name_or_expr $t ')'
			{
				$value->setType (TypeKind_SizeT);
			}
	|	TokenKind_TypeOf '(' type_name_or_expr $t ')'
			{
				Type* type = $t.m_type->getTypeKind () == TypeKind_DataRef ? ((DataPtrType*) $t.m_type)->getTargetType () : $t.m_type;
				$value->setType ($t.m_type);
			}
	|	TokenKind_OffsetOf '(' expression_0 ')'
			{
				$value->setType (TypeKind_SizeT);
			}
	|	TokenKind_BindingOf '(' conditional_expr_0 <$value> ')' 
			{
				return m_module->m_operatorMgr.getPropertyOnChangedType ($value);
			}
	|	resolver (cast_operator_rslv) 
		'(' storage_specifier? type_name $t ')' unary_expr_0 <$value> 
			{
				$value->setType ($t.m_type);
			}
	|	storage_specifier $s? TokenKind_New new_operator_sype_0 $t
			{
				StorageKind storageKind = isValidLocator ($s) ? $s.m_storageKind : StorageKind_Heap;
				return newOperator_0 (storageKind, $t.m_type, $value);			
			}
	|	TokenKind_Delete unary_expr_0 <$value> 
			{
				$value->setVoid ();
			}
	;

class
{
	Type* m_type;
}
new_operator_sype_0
	:	type_name
			{
				$.m_type = $1.m_type;
			}
	|	resolver (type_name_w_constructor_rslv) priority (2) // set higher priority than type_specifier::qualified_name
		qualified_type_name $t TokenKind_Construct? '(' expression_or_empty_list_0 ')'
			{
				$.m_type = $t.m_type;
			}
	;

postfix_expr_0 <Value* $value>
	:	primary_expr_0 <$value>
		postfix_operator_0 <$value>*
	;

postfix_operator_0 <Value* $value>
	leave 
	{
		if (m_stage == StageKind_ReactorScan && isBindableType ($value->getType ()))
			m_reactorBindableTypeCount++;
	}
	:	'(' expression_or_empty_list_0 ')'
			{
				return m_module->m_operatorMgr.getCallOperatorResultType ($value, &$2.m_valueList);
			}		
	|	'~' '(' expression_or_empty_list_0 ')'
			{
				return m_module->m_operatorMgr.getClosureOperatorResultType ($value, &$3.m_valueList);
			}		
	|	'[' expression_or_empty_0 ']'
			{
				return m_module->m_operatorMgr.getBinaryOperatorResultType (BinOpKind_Idx, $value, $2.m_value);
			}	
	|	TokenKind_Inc
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_PostInc, $value);
			}
	|	TokenKind_Dec
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_PostDec, $value);
			}
	|	'.'
		(TokenKind_Weak
			{
				return m_module->m_operatorMgr.getWeakenOperatorResultType ($value);
			}
		)?
		member_operator_0 <$value>
	|	TokenKind_Ptr 
			{
				return m_module->m_operatorMgr.getUnaryOperatorResultType (UnOpKind_Ptr, $value);
			}
		member_operator_0 <$value>
	;

member_operator_0 <Value* $value>
	:	TokenKind_Identifier $n
			{
				return m_module->m_operatorMgr.getMemberOperatorResultType ($value, $n.m_data.m_string);
			}
	|	TokenKind_Get
			{
				return m_module->m_operatorMgr.getPropertyGetterType ($value);
			}
	|	TokenKind_Set
			{
				return m_module->m_operatorMgr.getPropertySetterType ($value);
			}
	;

primary_expr_0 <Value* $value>
	leave 
	{
		if (m_stage == StageKind_ReactorScan && isBindableType ($value->getType ()))
			m_reactorBindableTypeCount++;
	}
	:	TokenKind_Identifier
			{
				return lookupIdentifierType ($1.m_data.m_string, $1.m_pos, $value);
			}
	|	TokenKind_BaseType
			{
				return getBaseType ($1.m_data.m_integer - 1, $value);
			}
	|	TokenKind_This
			{
				return m_module->m_operatorMgr.getThisValueType ($value);
			}
	|	TokenKind_Integer
			{
				$value->setType (getInt64TypeKind ($1.m_data.m_int64));
			}
	|	TokenKind_Fp
			{
				$value->setType (TypeKind_Double);
			}
	|	TokenKind_True
			{
				$value->setType (TypeKind_Bool);
			}
	|	TokenKind_False
			{
				$value->setType (TypeKind_Bool);
			}
	|	TokenKind_Null
			{
				$value->setNull ();
			}
	|	literal_0 <$value> 
	|	'(' conditional_expr_0 <$value> ')'
	;

literal_0 <Value* $value>
	local
	{
		Literal $literal;
	}
	:	(	TokenKind_Literal 
				{			
					$literal.m_binData.append ((const uchar_t*) $1.m_data.m_string.cc (), $1.m_data.m_string.getLength ());
					$literal.m_lastToken = TokenKind_Literal;
				}
		|	TokenKind_HexLiteral
				{			
					$literal.m_binData.append ($2.m_data.m_binData, $2.m_data.m_binData.getCount ());
					$literal.m_lastToken = TokenKind_HexLiteral;
				}
		|	TokenKind_FmtLiteral expression_0 TokenKind_FmtSpecifier?
				{
					// mark we have a formatting literal from now on

					if (!$literal.m_fmtLiteralValue)
						$literal.m_fmtLiteralValue.setConstBool (true); 
				}
		)+
			{
				return finalizeLiteral_0 (&$literal, $value);
			}
	;

//.............................................................................
