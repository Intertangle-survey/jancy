///+++

/// AXL_SELECT_ANY char g_jnc_BufferSrc [] = 

namespace jnc {

//.............................................................................

struct ConstBuffer
{
	setas ConstBufferRef;

	void const* readonly m_p;
	size_t readonly m_size;

	construct ()
	{
	}

	construct (ConstBufferRef src)
	{
		try copy (src);
	}

	construct (Buffer const* src)
	{
		try copy (src.m_p, src.m_size);
	}

	construct (
		void const* p,
		size_t size
		)
	{
		try copy (p, size);
	}

	bool copy (ConstBufferRef src) throws;

	bool copy (
		void const* p,
		size_t size
		) throws;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct ConstBufferRef
{
	void const* readonly m_p;
	size_t readonly m_size;
	bool readonly m_isFinal;

	construct ()
	{
	}

	construct (ConstBuffer src)
	{
		setup (src.m_p, src.m_size, true);
	}

	construct (Buffer const* src)
	{
		setup (src.m_p, src.m_size, false);
	}

	construct (
		void const* p,
		size_t size
		)
	{
		setup (src.m_p, size, false);
	}

protected:
	void setup (
		char const* p,
		size_t size,
		bool isFinal
		)
	{
		m_p = p;
		m_size = size;
		m_isFinal = isFinal;
	}
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct BufferRef
{
	void* readonly m_p;
	size_t readonly m_size;

	construct ()
	{
	}

	construct (Buffer* src)
	{
		setup (src.m_p, src.m_size);
	}

	construct (
		void const* p,
		size_t size
		)
	{
		setup (p, size);
	}

protected:
	void setup (
		char const* p,
		size_t size
		)
	{
		m_p = p;
		m_size = size;
	}
}

//.............................................................................

class Buffer
{
	void* readonly m_p;
	size_t readonly m_size;
	size_t readonly m_maxSize;

	bool copy (ConstBufferRef buffer) throws
	{
		return try copy (buffer.m_p, buffer.m_size);
	}

	bool copy (
		char const* p,
		size_t size,
		) throws;

	bool append (ConstBufferRef buffer) throws
	{
		return try append (buffer.m_p, buffer.m_size);
	}

	bool append (
		char const* p,
		size_t size,
		) throws;

	void operator := (ConstBufferRef src)
	{
		try copy (src);
	}
	
	void operator += (ConstBufferRef src)
	{
		try append (src);
	}
}

//.............................................................................

} // namespace jnc {

///;

///---
