//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

///+++

/// JNC_SELECT_ANY char g_sys_globalsSrc [] =

namespace sys {

//..............................................................................

//! \addtogroup thread
//! @{

/*!

/**
	Returns the thread identifier (TID) of the current thread.

	Translates to ``GetCurrentThreadId`` on Windows and ``pthread_self`` on POSIX.
*/

uintptr_t getCurrentThreadId ();

/**
	Creates a new thead and executes ``threadFunc`` in the context of the newly created thread.

	If you need to pass extra context parameters to the ``threadFunc``, use partial application as such::

		myThreadFunc (
			int intContext,
			char const* stringContext
			)
		{

		}

		// ...

		sys.createThread (myThreadFunc ~(100, "string-context"));

*/

bool createThread (function* threadFunc ());

//! @}

//! \addtogroup time
//! @{

/**
	Suspends the execution of the calling thread until ``timeout`` interval elapses. ``timeout`` is expressed in milliseconds.
*/

void sleep (uint32_t timeout);

/**
	Returns current system timestamp. Timestamp is expressed as a 64-bit value representing the number of 100-nanosecond intervals since January 1, 1601 (UTC).

	This format is the same as used in Windows ``FILETIME`` struct.
*/

uint64_t getTimestamp ();

//! @}

//! \addtogroup gc
//! @{

struct GcStats
{
	size_t m_currentAllocSize;
	size_t m_totalAllocSize;
	size_t m_peakAllocSize;
	size_t m_currentPeriodSize;
	size_t m_totalCollectCount;
	size_t m_lastCollectFreeSize;
	uint64_t m_lastCollectTime;
	uint64_t m_lastCollectTimeTaken;
	uint64_t m_totalCollectTimeTaken;
}

GcStats getGcStats ();

struct GcTriggers
{
	size_t m_allocSizeTrigger;
	size_t m_periodSizeTrigger;
}

GcTriggers property g_gcTriggers;

/**
	Forces a full cycle of garbage collection.
*/

void collectGarbage ();

//! @}

//..............................................................................

} // namespace sys

///;

///---
