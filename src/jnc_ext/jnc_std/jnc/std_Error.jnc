//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

///+++

/// JNC_SELECT_ANY char g_std_ErrorSrc [] =

namespace std {

//! \addtogroup std
//! @{

//..............................................................................

/**
	\brief This struct describes a globally unique identifier (GUID).

	GUIDs are 128-bit values often used as permanent labels which uniquely identify some sort of information. Creation of GUIDs does not require any significant central coordination.

	In practice any two generated GUIDs could be assumed to be distinct -- even though neither of GUID generation algorithms could strictly guarantee uniqueness of generated identifiers. The probability of collision is too low and can be neglected in most practical applications.

	In Jancy standard library GUIDs are used to identify the type of an error (``NTSTATUS``, ``WinError``, ``errno``, ``string-error`` etc).

	This struct directly maps to ``struct UUID`` as defined in ``WinAPI``.

	For more details about globally unique identifiers refer to: https://en.wikipedia.org/wiki/Globally_unique_identifier
*/

struct Guid
{
	/**
		Specifies the first 8 hexadecimal digits of the GUID.
	*/

	uint32_t m_data1;

	/**
		Specifies the first group of 4 hexadecimal digits of the GUID.
	*/

	uint16_t m_data2;

	/**
		Specifies the second group of 4 hexadecimal digits of the GUID.
	*/

	uint16_t m_data3;

	/**
		Array of eight elements. The first two elements contain the third group of 4 hexadecimal digits of the GUID. The remaining six elements contain the final 12 hexadecimal digits of the GUID.
	*/

	uint8_t m_data4 [8];
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

//! @}

//! \addtogroup error
//! @{

/**
	\brief This struct is used as a header to an error-describing buffer.

	Often times error is completely described by ``std.Error`` struct -- for example, ``errno``, ``NTSTATUS`` or ``WinError``. However, you can store as much information as necessary to fully describe your error. If extra bytes of information are required, they should follow the ``std.Error`` header.
*/

struct Error
{
	/**
		The full size of error-describing buffer. Should always be ``>= sizeof (std.Error)``.
	*/

	uint32_t readonly m_size;

	/**
		The ``GUID`` of the error. It tells Jancy runtime how to interpret ``m_code`` and the extra bytes of data following ``std.Error`` header.
	*/

	Guid readonly m_guid;

	/**
		The numerical code of the error. The actual meaning of this code depends on ``m_guid`` field. It may be ``errno``, or ``NTSTATUS``, or some user-defined code.
	*/

	uint32_t readonly m_code;

	/**
		Creates and returns human-readable description of the error.

		Jancy also supports a special formatter ``$!`` which if used inside formatting literal expands into description of the last error:

		.. ref-code-block::

			printf ($"cannot open file: $!\n");

		The code above is equivalent to:

		.. ref-code-block::

			char const* s = `std.getLastError` ().m_description;
			printf ($"cannot open file: $s\n");
	*/

	char const* const property m_description;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	Returns a pointer to the last error set in the context of the current thread.

	Currently this function allocates a new error buffer on every call. In the future caching will be implemented (if ``AXL`` error has not changed since the last invokation of ``getLastError`` then previously allocated error buffer could be re-used).
*/

Error const* getLastError ();

/**
	Returns a human readable description of the the last error set in the context of the current thread.

	Equivalent to:

	.. ref-code-block::

		std.getLastError ().:ref:`m_description<cid-std.error.m_description>`
*/

char const* getLastErrorDescription ()
{
	return getLastError ().m_description;
}

/**
	Sets ``errno`` error as the last error of the current thread.
*/

setErrno (int errno);

/**
	Sets string error described by a null-terminated string pointed to by ``string`` as the last error of the current thread.

	Calling `std.Error.m_description` on a string error will yield a null-terminated string identical to ``string``.
*/

setError (char const* string);

//..............................................................................

//! @}

} // namespace std

///;

///---
