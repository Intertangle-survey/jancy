//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

///+++

/// JNC_SELECT_ANY char g_std_StringSrc [] =

namespace std {

//! \addtogroup container
//! @{

//..............................................................................

class StringBuilder
{
	char readonly* readonly m_p;
	size_t readonly m_length;
	size_t readonly m_maxLength;

	char get (size_t offset)
	{
		boundsCheck (offset);
		return m_p [offset];
	}

	set (
		size_t offset,
		char e
		)
	{
		boundsCheck (offset);
		m_p [offset] = e;
	}

	size_t errorcode operator := (char const* p)
	{
		return copy (p);
	}

	size_t errorcode operator += (char const* p)
	{
		return append (p);
	}

	clear ();

	bool errorcode reserve (size_t length);

	size_t errorcode copy (
		char const* p,
		size_t length = -1
		);

	size_t errorcode copy (char c)
	{
		return copy (&c, 1);
	}

	size_t errorcode append (
		char const* p,
		size_t length = -1
		)
	{
		return insert (-1, p, length);
	}

	size_t errorcode append (char c)
	{
		return insert (-1, &c, 1);
	}

	size_t errorcode insert (
		size_t offset,
		char const* p,
		size_t length = -1
		);

	size_t errorcode insert (
		size_t offset,
		char c
		);

	size_t remove (
		size_t offset,
		size_t length = 1
		);

	char* errorcode detachString ();
	char* errorcode cloneString ();

protected:
	boundsCheck (size_t offset)
	{
		if (offset >= m_length)
		{
			std.setError ($"attempt to access out-of-bounds offset $offset (length: $m_length)");
			throw;
		}
	}
}

//..............................................................................

//! @}

} // namespace std

///;

///---
