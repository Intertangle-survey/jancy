//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace std {

//! \addtogroup std-container
//! @{

//..............................................................................

//! \import std_Buffer.jnc

class Buffer
{
	char cmut* readonly m_p;
	size_t readonly m_size;
	size_t readonly m_maxSize;

	char get(size_t offset)
	{
		boundsCheck(offset);
		return m_p[offset];
	}

	set(
		size_t offset,
		char e
		)
	{
		boundsCheck(offset);
		m_p[offset] = e;
	}

	clear();

	detach()
	{
		m_p = null;
		m_size = 0;
		m_maxSize = 0;
	}

	bool errorcode setSize(size_t size);
	bool errorcode reserve(size_t size);

	size_t errorcode copy(
		void const* p,
		size_t size
		);

	size_t errorcode append(
		void const* p,
		size_t size
		)
	{
		return insert(-1, p, size);
	}

	size_t errorcode append(char const* p)
	{
		return insert(-1, p);
	}

	size_t errorcode insert(
		size_t offset,
		void const* p,
		size_t size
		);

	size_t errorcode insert(
		size_t offset,
		char const* p
		)
	{
		return p ? insert(offset, p, strlen(p) + 1) : insert(offset, "", 1);
	}

	size_t errorcode remove(
		size_t offset,
		size_t size
		);

protected:
	boundsCheck(size_t offset)
	{
		if (offset >= m_size)
		{
			std.setError($"attempt to access out-of-bounds offset $offset (size: $m_size)");
			throw;
		}
	}
}

//..............................................................................

//! @}

} // namespace std
