//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_SocketAddress.jnc"

namespace io {

//! \addtogroup ssh
//! @{

//..............................................................................

enum SshEventCode
{
	TcpConnectCompleted,
	SshHandshakeCompleted,
	SshAuthCompleted,
	SshAuthError,
	SshChannelOpened,
	SshPtyRequested,
	SshProcessStarted,
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
	ReauthenticateInitiated,
	ReconnectInitiated,
	IncomingData,
	TransmitBufferReady,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SshEventParams
{
	SshEventCode m_eventCode;
	uint_t m_syncId;
	std.Error const* m_error;
}

//..............................................................................

opaque class SshChannel
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;

	bool readonly m_isOpen;
	uint_t m_syncId;

	construct ();
	destruct ();

	bool errorcode open (SocketAddress const* address = null);
	void close ();

	bool errorcode connect (
		SocketAddress const* address,
		char const* userName,
		char const* password,
		char const* channelType = "session", // session, direct-tcpip, tcpip-forward, etc
		char const* processType = "shell",   // shell, exec, subsystem, etc
		char const* ptyType = "ansi",        // vanilla, ansi, xterm, vt102, etc
		uint_t ptyWidth = 80,
		uint_t ptyHeight = 24,
		bool isSync = false
		);

	bool errorcode authenticate (
		char const* userName,
		char const* password
		);

	bool errorcode resizePty (
		uint_t width,
		uint_t height,
		bool isSync = false
		);

	size_t errorcode read (
		void* p,
		size_t size
		);

	size_t errorcode write (
		void const* p,
		size_t size
		);

	event m_onSshEvent (SshEventParams const* params);
}

//..............................................................................

//! @}

} // namespace io
