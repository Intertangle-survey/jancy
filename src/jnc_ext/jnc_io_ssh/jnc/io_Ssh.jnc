//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_SocketAddress.jnc"

namespace io {

//! \addtogroup ssh
//! @{

//..............................................................................

/**
	\import io_ssh.jncx

	\brief This enumeration contains codes of all possible events that might happen on `io.SshChannel` object.

	When `io.SshChannel` object is about to fire an event, it allocates an `io.SshEventParams` structure, sets `io.SshEventParams.m_eventCode` field to one of the values below, fills other relevant fields of and then calls all subscribers of `io.SshChannel.m_onSshEvent`.

	\sa `io.SshChannel`, `io.SshEventParams`
*/

enum SshEventCode
{
	/**
		Underlying transport ``TCP`` has been established.
	*/

	TcpConnectCompleted,

	/**
		``SSH`` handshake and protocol information exchange has been completed successfully.
	*/

	SshHandshakeCompleted,

	/**
		``SSH`` authentication has been completed successfully.
	*/

	SshAuthCompleted,

	/**
		``SSH`` authentication has failed. You have a chance to re-authenticate: ask user for new credentials and then call `io.SshChannel.authenticate`.
	*/

	SshAuthError,

	/**
		``SSH`` channel to the server has been opened successfully.
	*/

	SshChannelOpened,

	/**
		Request has been sent to the ``SSH`` server for a specific pseudo-terminal (such as ``xterm``).
	*/

	SshPtyRequested,

	/**
		Remote process (such as ``shell``) has been started by the ``SSH`` server.
	*/

	SshProcessStarted,

	/**
		The full ``SSH`` connect sequence has been completed successfully. ``SSH`` channel is ready to use.
	*/

	ConnectCompleted,

	/**
		``SSH`` connect sequence has been interrupted by `io.SshChannel.close` method.
	*/

	ConnectCancelled,

	/**
		Failure happened during ``SSH`` connect sequence. Detailed error information is available at: `io.SshEventParams.m_error`.
	*/

	ConnectError,

	/**
		``SSH`` channel has been closed by the remote server. Note that if connection was terminated by the local node (using `io.SshChannel.close`), ``Disconnect`` event is **not** fired.
	*/

	Disconnected,

	/**
		User has issued `io.SshChannel.authenticate` using the same user name; no re-connect is needed for ``SSH`` re-authentication.
	*/

	ReauthenticateInitiated,

	/**
		User has issued `io.SshChannel.authenticate` using a different user name; a full cycle of re-connect (starting at the transport ``TCP`` level) is required.
	*/

	ReconnectInitiated,

	/**
		More data is available on the socket; this data could be fetched with `io.SshChannel.read` method.
	*/

	IncomingData,

	/**
		Socket transmit buffer is ready to accept more data; it's OK to issue more `io.SshChannel.write` requests.
	*/

	TransmitBufferReady,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_ssh.jncx

	\brief This struct contains detailed information about the event occured on `io.SshChannel` object.

	Pointer to the instance of this struct is the only argument passed to the subscribers of `io.SshChannel.m_onSshEvent`.

	\sa `io.SshChannel`, `io.SshEventCode`

	\footnote f1

		|footnote-sync-id|
*/

struct SshEventParams
{
	/**
		Holds the numerical code of the event. For a list of all possible codes refer to `io.SshEventCode`.
	*/

	SshEventCode m_eventCode;

	/**
		Holds the synchronization ID of the event. This field should be used for discarding of the events which have been delivered late due to scheduling [#f1]_.
	*/

	uint_t m_syncId;

	/**
		Holds extended error information for error events. This field is used by `io.SshEventCode.ConnectError`, `io.SshEventCode.SshAuthError`.
	*/

	std.Error const* m_error;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_ssh.jncx

	\brief This class provides high-level asynchronous interface for client-side SSH connections.

	Under the hood ``io.SshChannel`` uses libssh2 library.

	A typical sequence of steps when establishing an SSH connection looks like this:

	* Assign your event handler using ``m_onSshEvent`` (you would probably also want to *schedule* your event handler to be run in particular environment, e.g. in specific thread);
	* Call ``open`` method to open underlying socket;
	* Call ``connect`` method to initate connection to ``SSH`` server;
	* If ``SshAuthError`` event is fired, you can re-authenticate using ``authenticate`` method;
	* Wait until ``ConnectCompleted`` or ``ConnectError`` event;
	* When ``IncomingData`` event is fired, read from the file using ``read`` method;
	* Write to the file stream using ``write`` method;
	* Suspend writing if the return value of ``write`` is less than requested;
	* Resume writing on ``TransmitBufferReady`` event;
	* Close the SSH channel when no longer needed with ``close`` method.

	.. rubric:: Sample code:

	.. ref-code-block::

		class MyDialog
		{
			// ...

			io.SshChannel m_ssh;

			construct ();

			open (
				char const* portName,
				uint_t baudRate
				);

			onWriteButtonClicked ();
			onSshEvent (`io.SshEventParams` const* params);
		}

		MyDialog.construct ()
		{
			// ...
			m_ssh.m_onSshEvent += onSshEvent @ g_mainThreadScheduler;
		}

		MyDialog.connect (
			char const* addrString,
			char const* userName,
			char const* password
			)
		{
			`io.SocketAddress` sockAddr;
			sockAddr.parse (addrString);

			m_ssh.open ();
			m_ssh.connect (sockAddr, userName, password);

		catch:
			// handle the error...
		}

		MyDialog.onSendButtonClicked ()
		{
			static char data [] = "a quick brown fox jumps over the lazy dog";
			m_ssh.send (data, sizeof (data));
		}

		MyDialog.onSshEvent (`io.SshEventParams` const* params)
		{
			if (params.m_syncId != m_ssh.m_syncId) // late event
				return;

			switch (params.m_code)
			{
			case `io.SshEventCode.SshAuthError`:
				// show some kind of login dialog...
				// ... then re-authenticate:
				m_ssh.authenticate (userName, password);
				break;

			case `io.SshEventCode.ConnectError`:
				// handle error (extended info is at: params.m_error)...
				break;

			case `io.SshEventCode.ConnectCompleted`:
				// handle successfull connection...
				break;

			case `io.SshEventCode.IncomingData`:
				char buffer [256];
				size_t size = m_ssh.recv (buffer, sizeof (buffer));
				// ...
				break;
			}
		}

	\sa `io.Socket`, `io.SocketAddress`, `io.SocketAddressResolver`

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|

	\footnote f3

		|footnote-sync-id|
*/

opaque class SshChannel
{
	/**
		This property is used for getting the local address assigned to this socket. If the address has not been assigned yet, returns empty address.
	*/

	SocketAddress const property m_address;

	/**
		This property is used for getting the remote address of the peer this socket is connected to. If the connection has not been established yet, returns empty address.
	*/

	SocketAddress const property m_peerAddress;

	/**
		Holds the open status for the SSH channel, i.e. ``true`` if opened; ``false`` otherwise.
	*/

	bool readonly m_isOpen;

	/**
		Holds the synchronization ID for the SSH channel [#f3]_.
	*/

	uint_t m_syncId;

	construct ();
	destruct ();

	/**
		Opens a ``TCP`` socket this connection will use for transport.

		Returns ``true`` on success. If a new socket could not be opened, IO error supplied by operating system is set and then the function returns ``false`` [#f1]_.
	*/

	bool errorcode open (SocketAddress const* address = null);

	/**
		Closes ``SSH`` channel and underlying ``TCP`` socket; does nothing if connection is not and not being established.

		Sometimes it may be convenient to use *disposable* pattern to ensure timely invokation of ``close`` [#f2]_.
	*/

	void close ();

	/**
		Effectively makes ``io.SshChannel`` a *disposable* class [#f2]_.
	*/

	alias dispose = close;

	/**
		Initiates a connection request to ``address``.

		The meanings of the arguments for this function are as follows:

		* ``address`` specifes the remote ``SSH`` server to connect to;
		* ``userName`` and ``password`` specify user credential used to login to this SSH server;
		* ``channelType`` specifies the type of the channel to establish (typically, ``session``; can also be ``direct-tcpip``, ``tcpip-forward`` etc);
		* ``processType`` specifies what kind of process to run on the server side of this ``SSH`` channel (typically, ``shell``; can also be ``exec``, ``subsystem`` etc);
		* ``ptyType`` specifies what type of pseudo terminal kind of process to run on the server side of this ``SSH`` channel (typically, ``xterm``; can also be ``ansi``, ``vanilla`` etc);
		* ``ptyWidth`` and ``ptyHeight`` specify the size of the pseudo-terminal;
		* ``isSync`` specifies whether this is a synchronous connect.

		Returns ``true`` on success. If a connection could not be initiated, corresponding error is set and then the function returns ``false`` [#f1]_.
	*/

	bool errorcode connect (
		SocketAddress const* address,
		char const* userName,
		void const* privateKey,
		size_t privateKeySize,
		char const* password,
		char const* channelType = "session", // session, direct-tcpip, tcpip-forward, etc
		char const* processType = "shell",   // shell, exec, subsystem, etc
		char const* ptyType = "ansi",        // vanilla, ansi, xterm, vt102, etc
		uint_t ptyWidth = 80,
		uint_t ptyHeight = 24,
		bool isSync = false
		);

	/**
		Sends a request to SSH server to re-authenticate on ``AuthError`` event.

		Returns ``true`` on success. If re-authenticate request could not be sent, returns ``false`` [#f1]_.
	*/

	bool errorcode authenticate (
		char const* userName,
		void const* privateKey,
		size_t privateKeySize,
		char const* password
		);

	/**
		Sends a request to SSH server to resize pseudo-terminal to ``width`` x ``height``. If ``isSync`` is ``true`` then this method does not return until the remote server completes the request.

		Returns ``true`` on success. If pseudo-terminal could not be resized, error returned by the remote server is set and then the function returns ``false`` [#f1]_.
	*/

	bool errorcode resizePty (
		uint_t width,
		uint_t height,
		bool isSync = false
		);

	/**
		Attempts to receive up to ``size`` bytes from the SSH socket into the buffer pointed to by ``p``.

		Returns the actual amount of bytes read on success. If read operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``-1`` [#f1]_.

		Normally you would call this function from within your event handler for ``IncomingData`` event. If this function is called when there is no incoming data, it blocks until either the data arrives, or the socket is closed.
	*/

	size_t errorcode read (
		void* p,
		size_t size
		);

	/**
		Attempts to send ``size`` bytes from the buffer pointed to by ``p`` over the established SSH channel.

		Returns the actual amount of bytes written on success. If write operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``-1`` [#f1]_.

		If the return value shows *less* bytes than specified by ``size`` argument, you should suspend further transmission until the file stream is ready to accept more data. When this happens, ``TransmitBufferReady`` event is fired and transmission could be resumed.
	*/

	size_t errorcode write (
		void const* p,
		size_t size
		);

	/**
		This event is fired whenever an event occurs on the SSH socket.

		For the list of possible events, refer to `io.SshEventCode` enumeration.

		Event handler receives a single argument of type `io.SshEventParams` which holds parameters of the particular event [#f3]_.
	*/

	event m_onSshEvent (SshEventParams const* params);
}

//..............................................................................

//! @}

} // namespace io
