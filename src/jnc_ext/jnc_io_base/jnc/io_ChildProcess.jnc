//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_FileStream.jnc"

namespace io {

//! \addtogroup io-file
//! @{

//..............................................................................

bitflag enum ChildProcessOptions
{
	KeepReadBlockSize,
	KeepWriteBlockSize,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum ChildProcessStartFlags
{
	Pty,
	SeparateStderr,
	CleanEnvironment,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum ChildProcessEvents
{
	/**
		An IO error occured on the file stream; detailed information about the
		error is available at `io.FileStream.m_ioError`.
	*/

	IoError,

	/**
		More data is available on the file stream; this data could be fetched
		with `io.FileStream.read` method.
	*/

	IncomingData,

	/**
		File stream receive buffer is full; upcoming data may be dropped
		(depending on the underlying device represented by the file).
	*/

	ReadBufferFull,

	/**
		File stream transmit buffer is empty.
	*/

	WriteBufferEmpty,

	/**
		File stream transmit buffer is ready to accept more data; it's OK to
		issue more `io.FileStream.write` requests.
	*/

	WriteBufferReady = WriteBufferEmpty,

	/**
		End-of-file was reached on the ``stdin`` stream.
	*/

	Eof,

	ProcessFinished,
	ProcessCrashed,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct PtySize
{
	uint_t m_rowCount;
	uint_t m_colCount;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class ChildProcess
{
	FileStream* readonly m_stderr;

	uint_t autoget property m_readParallelism;
	size_t autoget property m_readBlockSize;
	size_t autoget property m_readBufferSize;
	size_t autoget property m_writeBufferSize;

	ChildProcessOptions autoget property m_options;
	ChildProcessEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	bool readonly m_isOpen;

	uint_t const property m_pid;
	uint_t const property m_exitCode;
	PtySize property m_ptySize;

	construct();
	destruct();

	bool errorcode start(
		char const* commandLine,
		char const* const* environment = null,
		ChildProcessStartFlags flags = 0
		);

	bool errorcode terminate();
	void close();
	alias dispose = close;

	size_t errorcode read(
		void* p,
		size_t size
		);

	size_t errorcode write(
		void const* p,
		size_t size
		);

	intptr errorcode wait(
		ChildProcessEvents eventMask,
		function* handler(ChildProcessEvents triggeredEvents)
		);

	bool errorcode cancelWait(intptr handle);

	ChildProcessEvents blockingWait(
		ChildProcessEvents eventMask,
		uint_t timeout = -1
		);

	async ChildProcessEvents asyncWait(ChildProcessEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
