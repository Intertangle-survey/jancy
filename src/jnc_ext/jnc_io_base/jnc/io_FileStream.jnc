//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_File.jnc"

namespace io {

//! \addtogroup file
//! @{

//..............................................................................

/**
	\import io_base.jncx
	\import io_FileStream.jnc

	\brief This enumeration contains all possible values for the underlying type of of `io.FileStream` object.

	Currently, this functionality is only available on Windows (via WinAPI function ``GetFileType``).
*/

enum FileStreamKind
{
	//! Denotes undefined (or generic) file stream.

	Unknown,

	//! The file stream represents a disk file.

	Disk,

	//! The file stream represents a serial port.

	Serial,

	//! The file stream represents a named pipe.

	Pipe,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**

	Returns string representation of the ``kind`` argument. In case ``kind`` does not correspond to any known file stream kind (e.g. you have casted a random integer number to `io.FileStreamKind` enumeration type), string ``unknown device`` is returned.
*/

char const* getFileStreamKindString (FileStreamKind kind)
{
	static char const* stringTable [] =
	{
		"unknown device", // FileStreamKind.Unknown,
		"disk file",      // FileStreamKind.Disk,
		"serial device",  // FileStreamKind.Serial,
		"pipe",           // FileStreamKind.Pipe,
	};

	return kind < countof (stringTable) ?
		stringTable [kind] :
		stringTable [0];
}

//..............................................................................

/**
	\import io_base.jncx
	\import io_FileStream.jnc

	\brief This enumeration contains codes of all possible events that might happen on `io.FileStream` object.

	When `io.FileStream` object is about to fire an event, it allocates an `io.FileStreamEventParams` structure, sets `io.FileStreamEventParams.m_eventCode` field to one of the values below, fills other relevant fields of and then calls all subscribers of `io.FileStream.m_onFileStreamEvent`.

	\sa `io.FileStream`, `io.FileStreamEventParams`
*/

enum FileStreamEventCode
{
	/**
		End-of-file was reached on the file stream.
	*/

	Eof,

	/**
		More data is available on the file stream; this data could be fetched with `io.FileStream.read` method.
	*/

	IncomingData,

	/**
		An IO error occured on the file stream; detailed information about the error is available at `io.FileStreamEventParams.m_error`.
	*/

	IoError,

	/**
		File stream transmit buffer is ready to accept more data; it's OK to issue more `io.FileStream.write` requests.
	*/

	TransmitBufferReady,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_FileStream.jnc

	\brief This struct contains detailed information about the event occured on `io.FileStream` object.

	Pointer to the instance of this struct is the only argument passed to the subscribers of `io.FileStream.m_onFileStreamEvent`.

	\sa `io.FileStream`, `io.FileStreamEventCode`

	\footnote f1

		|footnote-sync-id|
*/

struct FileStreamEventParams
{
	/**
		Holds the numerical code of the event. For a list of all possible codes refer to `io.FileStreamEventCode`.
	*/

	FileStreamEventCode m_eventCode;

	/**
		Holds the synchronization ID of the event. This field should be used for discarding of the events which have been delivered late due to scheduling [#f1]_.
	*/

	uint_t m_syncId;

	/**
		Holds extended error information for error events. Currently this field is only used by `io.FileStreamEventCode.IoError`.
	*/

	std.Error* m_error;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_FileStream.jnc

	\brief This class provides high-level asynchronous streaming interface for reading from and writing to files or devices.

	Besides all the standard methods of ``io.File`` (like ``open``, ``read``, ``write`` etc) ``io.FileStream`` also notifies its clients of events occured on this file stream such as when data has arrived and could be read or when IO error occured. This allows for clean and convenient asynchronous event-driven IO programming.

	A typical sequence of steps when working with a file stream looks something like this:

	* Assign your event handler using ``m_onFileStreamEvent`` (you would probably also want to *schedule* your event handler to be run in particular environment, e.g. in specific thread)
	* Open a file stream with ``open`` method;
	* When ``IncomingData`` event is fired, read from the file using ``read`` method;
	* Write to the file stream using ``write`` method;
	* Suspend writing if the return value of ``write`` is less than requested;
	* Resume writing on ``TransmitBufferReady`` event;
	* Close the file stream when no longer needed with ``close`` method.

	.. rubric:: Sample code:

	.. ref-code-block::

		class MyDialog
		{
			// ...

			io.FileStream m_fileStream;

			construct ();
			open (char const* fileName);
			onWriteButtonClicked ();
			onFileStreamEvent (`io.FileStreamEventParams` const* params);
		}

		MyDialog.construct ()
		{
			// ...
			m_fileStream.m_onFileStreamEvent += onFileStreamEvent @ g_mainThreadScheduler;
		}

		MyDialog.open (char const* fileName)
		{
			bool result = try m_fileStream.open (fileName);
			if (!result)
			{
				// handle the error...
			}
		}

		MyDialog.onWriteButtonClicked ()
		{
			static char data [] = "a quick brown fox jumps over the lazy dog";
			m_fileStream.write (data, sizeof (data));
		}

		MyDialog.onFileStreamEvent (`io.FileStreamEventParams` const* params)
		{
			if (params.m_syncId != m_fileStream.m_syncId) // late event
				return;

			switch (params.m_code)
			{
			case `io.FileStreamEventCode.IncomingData`:
				char buffer [256];
				size_t size = m_fileStream.read (buffer, sizeof (buffer));
				// ...
				break;
			}
		}

	\sa `io.FileStreamEventParams`, `io.FileStreamEventCode`, `io.File`, `io.NamedPipe`, `io.Mailslot`

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|

	\footnote f3

		|footnote-sync-id|
*/

opaque class FileStream
{
	/**
		Holds the open status for the file, i.e. ``true`` if opened; ``false`` otherwise.
	*/

	bool readonly m_isOpen;

	/**
		Holds the synchronization ID for the file stream [#f3]_.
	*/

	uint_t m_syncId;

	/**
		Specifies the type of the file stream (regular disk file, serial port etc). For the full list of supported file stream types, refer to `io.FileStreamKind`.

		This field is currently only initialized on Windows. To to detect the type ``io.FileStream`` uses WinAPI function ``GetFileType``.
	*/

	FileStreamKind readonly m_kind;

	construct ();
	destruct ();

	/**
		Opens or creates a file stream.

		The function accepts two arguments. The first one, ``name`` specifies the name of the file/device. The second one, ``flags``, can be used to specify open options. Check `io.FileOpenFlags` for the complete list of options.

		Returns ``true`` on success. If the file stream could not be opened, IO error supplied by operating system is set and then the function returns ``false`` [#f1]_.
	*/

	bool errorcode open (
		char const* name,
		FileOpenFlags flags = 0
		);

	/**
		Closes a previously opened file stream, does nothing if the file stream is not opened. This function always succeeds.

		Sometimes it may be convenient to use *disposable* pattern to ensure timely invokation of ``close`` [#f2]_.
	*/

	void close ();

	/**
		Effectively makes ``io.FileStream`` a *disposable* class [#f2]_.
	*/

	alias dispose = close;

	/**
		Clears the file, destroying all its contents. This function is only applicable to regular disk file streams.

		Returns ``true`` on success. If clear operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``false`` [#f1]_.
	*/

	bool errorcode clear ();

	/**
		Attempts to read up to ``size`` bytes from the file strean into the buffer pointed to by ``p``.

		Returns the actual amount of bytes read on success. If read operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``-1`` [#f1]_.

		Normally you would call this function from within your event handler for ``IncomingData`` event. If this function is called when there is no incoming data, it blocks until either the data arrives, or the file is closed, so its behavior resembles ``io.File.read``
	*/

	size_t errorcode read (
		void* p,
		size_t size
		);

	/**
		Attempts to write ``size`` bytes from the buffer pointed to by ``p`` into the file stream.

		Returns the actual amount of bytes written on success. If write operation is unsuccessful, IO error supplied by the operating system is set and then the function returns ``-1`` [#f1]_.

		If the return value shows *less* bytes than specified by ``size`` argument, you should suspend further transmission until the file stream is ready to accept more data. When this happens, ``TransmitBufferReady`` event is fired and transmission could be resumed.
	*/

	size_t errorcode write (
		void const* p,
		size_t size
		);

	/**
		This event is fired whenever an event occurs on the file stream.

		For the list of possible events, refer to `io.FileStreamEventCode` enumeration.

		Event handler receives a single argument of type `io.FileStreamEventParams` which holds parameters of the particular event [#f3]_.
	*/

	event m_onFileStreamEvent (FileStreamEventParams const* params);

	/**
		When ``FileStream`` object is created as a result of `io.NamedPipe.accept` method, events of the new file stream are initially disabled -- otherwise, how could you handle the events occurred right after ``accept`` but before you have a chance to assign a new event handler?

		Once you have assigned an event handler for the new file stream, you can re-enable its events by setting ``m_isFileStreamEventEnabled`` to ``true``. All the pending events will be replayed so your new handler has a chance to process them in the same order they originally occurred.
	*/

	bool property m_isFileStreamEventEnabled;
}

//! @}

//..............................................................................

} // namespace io
