//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_SocketAddress.jnc"

namespace io {

//! \addtogroup socket
//! @{

//..............................................................................

/**
	\import io_base.jncx
	\import io_SocketAddressResolver.jncx

	\brief This class provides an asynchrounous interface for resolving host
	names into socket addresses.

	In the most general case conversion of a host name such as ``tibbo.com``
	into an ``IP`` requires sending and receiving network packets and,
	therefore, may take substantial time. Doing this operation synchronoulsy,
	while acceptable in many cases, is not really optimal for interactive GUI
	applications where we do not want to have moments of *non-responsiveness*.
	For such cases using ``io.SocketAddressResolver`` may be a better approach.

	A typical sequence of steps when resolving a host address looks like this:

	* Assign your event handler using ``m_onResolverEvent`` (you would probably
	  also want to *schedule* your event handler to be run in particular
	  environment, e.g. in specific thread)
	* Start one or more resolve requests with ``resolve`` method;
	* Wait until ``ResolveCompleted`` or ``ResolveError`` event;
	* Cancel all pending resolve requests with ``cancelAll`` method.

	.. rubric:: Sample code:

	.. ref-code-block::

		class MyDialog
		{
			// ...

			io.SocketAddressResolver m_resolver;
			uint_t m_syncId;

			resolve (char const* hostName);

			onResolverEvent (
				uint_t syncId,
				`io.SocketAddress` const* addressTable,
				size_t addressCount,
				`std.Error` const* error
				);
		}

		MyDialog.resolve (char const* hostName)
		{
			bool result = try m_resolver.resolve (
				hostName,
				onResolveCompleted ~(++m_syncId) @ g_mainThreadScheduler
				);

			if (!result)
			{
				// handle the error...
			}
		}

		MyDialog.onResolveCompleted (
			uint_t syncId,
			`io.SocketAddress` const* addressTable,
			size_t addressCount,
			`std.Error` const* error
			)
		{
			if (syncId != m_syncId) // late event
				return;

			if (error)
			{
				// handle error
			}
			else
			{
				// hostname successfully resolved; result is at: addressTable
			}
		}

	\sa `io.SocketAddress`

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|

	\footnote f3

		|footnote-sync-id|
*/

opaque class SocketAddressResolver
{
	typedef CompletionFunc (
		SocketAddress const* addressTable,
		size_t addressCount,
		std.Error const* error
		);

	construct ();
	destruct ();

	/**
		Starts a new resolve request, bumps ``m_syncId`` and assigns it to the
		new request.

		Returns ``true`` on success. If a resolve request could not be started,
		IO error supplied by operating system is set and then the function
		returns ``false`` [#f1]_.
	*/

	uintptr_t errorcode resolve (
		char const* name,
		AddressFamily family,
		CompletionFunc* completionFunc
		);

	uintptr_t errorcode resolve (
		char const* name,
		CompletionFunc* completionFunc
		)
	{
		return resolve (name, AddressFamily.Undefined, completionFunc);
	}

	/**
		Cancels an on-going resolve requests identified by ``syncId``, does
		nothing is ``syncId`` request is not found.
	*/

	bool cancel (uintptr_t id);

	/**
		Cancels all on-going resolve requests.

		Sometimes it may be convenient to use *disposable* pattern to ensure
		timely invokation of ``cancelAll`` [#f2]_.
	*/

	void cancelAll ();

	/**
		Effectively makes ``io.SocketAddressResolver`` a *disposable* class
		[#f2]_.
	*/

	alias dispose = cancelAll;
}

//..............................................................................

//! @}

} // namespace io
