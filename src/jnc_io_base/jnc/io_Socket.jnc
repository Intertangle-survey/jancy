import "io_SocketAddress.jnc"

namespace io {

//.............................................................................

enum SocketEvent
{
	ConnectCompleted,
	ConnectCancelled,
	ConnectError,
	Disconnected,
	IncomingData,
	IncomingConnection,
	TransmitBufferOverflow,
	TransmitBufferReady,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum SocketDisconnectEventFlags
{
	Reset,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SocketEventParams
{
	SocketEvent m_eventKind;
	uint_t m_syncId;
	uint_t m_flags;
	std.Error const* m_error;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum SocketCloseKind
{
	Reset = 0,
	Graceful,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Socket
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;
	
	bool property m_isBroadcastEnabled;
	bool property m_isNagleEnabled;
	bool property m_isRawHdrIncluded;
	SocketCloseKind property m_closeKind;

	bool readonly m_isOpen;
	uint_t m_syncId;

	construct ();
	destruct ();

	bool errorcode open (
		Protocol protocol,
		AddressFamily family = AddressFamily.Ip4
		);

	bool errorcode open (
		Protocol protocol,
		SocketAddress const* address,
		bool isReusableAddress = false
		);

	bool errorcode openRaw (
		Protocol protocol,
		AddressFamily family = AddressFamily.Ip4
		);
		
	void close ();

	bool errorcode connect (
		SocketAddress const* address,
		bool isSync = false
		);

	bool errorcode listen (size_t backLog = 0); // 0 -- default
	Socket* errorcode accept (SocketAddress* address = null);

	size_t errorcode send (
		void const* p,
		size_t size
		);

	size_t errorcode recv (
		void* p,
		size_t size
		);

	size_t errorcode sendTo (
		void const* p,
		size_t size,
		SocketAddress const* address
		);

	size_t errorcode recvFrom (
		void* p,
		size_t size,
		SocketAddress* address
		);

	event m_onSocketEvent (SocketEventParams const* params);

	void firePendingEvents (); // to process events happened after accept () and before assiging event handler
}

//.............................................................................

} // namespace io
