import "io_SocketAddress.jnc"

namespace io {

//! \addtogroup pcap
//! @{

//.............................................................................

enum PcapEventCode
{
	ReadyRead,
	Eof,
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct PcapEventParams
{
	PcapEventCode m_eventCode;
	uint_t m_syncId;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Pcap
{
	char const* readonly m_filter;
	bool readonly m_isPromiscious;
	bool readonly m_isOpen;
	uint_t m_syncId;

	construct ();
	destruct ();

	bool errorcode openDevice (
		char const* deviceName,
		char const* filter = null,
		bool isPromiscious = false
		);

	bool errorcode openFile (
		char const* fileName,
		char const* filter = null
		);
		
	void close ();
	
	bool errorcode setFilter (char const* filter);

	size_t errorcode write (
		void const* p,
		size_t size
		);

	size_t errorcode read (
		void* p,
		size_t size
		);

	event m_onPcapEvent (PcapEventParams const* params);
}

//.............................................................................

// pcap device enumeration

struct PcapAddress
{
	PcapAddress const* m_next;
	Address_ip4 m_address;
	Address_ip4 m_mask;
	Address_ip4 m_broadcast;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct PcapDeviceDesc
{
	PcapDeviceDesc const* m_next;
	char const* m_name;
	char const* m_description;
	PcapAddress m_address;
	uint_t m_flags;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

PcapDeviceDesc const* createPcapDeviceDescList (size_t* count = null);

//.............................................................................

//! @}

} // namespace io

/*!

\defgroup pcap Pcap (Packet Capturing Library)

*/