namespace jnc {

///+++

//.............................................................................

///; static char schedulerTypeSrc [] = 

class Scheduler
{
	abstract schedule (function* proc ());
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char guidTypeSrc [] = 

struct Guid
{
	uint32_t m_data1;
	uint16_t m_data2;
	uint16_t m_data3;
	uint8_t m_data4 [8];
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char errorTypeSrc [] = 

struct Error
{
	uint32_t readonly m_size;
	Guid readonly m_guid;
	uint32_t readonly m_code;

	char const* const property m_description;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char automatonResultTypeSrc [] = 

enum AutomatonResult
{
	Error    = -1,
	Continue = 0,
	Stop     = 1,
}

//.............................................................................

///---

} // namespace jnc {

namespace jnci {

///+++

//.............................................................................

///; static char fmtLiteralTypeSrc [] = 

struct FmtLiteral
{
	char const* m_p;
	size_t m_length;
	size_t m_maxLength;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char reactorBindSiteTypeSrc [] = 

struct ReactorBindSite
{
	event* m_event ();
	intptr m_cookie;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char int64Int64TypeSrc [] = 

struct Int64Int64
{
	int64 m_a;
	int64 m_b;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char fp64Fp64TypeSrc [] = 

struct Fp64Fp64
{
	double m_a;
	double m_b;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char int64Fp64TypeSrc [] = 

struct Int64Fp64
{
	int64 m_a;
	double m_b;
}

//. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

///; static char fp64Int64TypeSrc [] = 

struct Fp64Int64
{
	double m_a;
	int64 m_b;
}

///;

//.............................................................................

///---

} // namespace jnci {

