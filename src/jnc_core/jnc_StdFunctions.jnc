///+++

//.............................................................................

///; static char strlenSrc [] = 

size_t strlen (char const* p);

///; static char strcmpSrc [] = 

int strcmp (
	char const* p1,
	char const* p2
	);

///; static char stricmpSrc [] = 

int stricmp (
	char const* p1,
	char const* p2
	);

///; static char strchrSrc [] = 

char const* strchr (
	char const* p,
	int c
	);

///; static char strcatSrc [] = 

char const* strcat (
	char const* p1,
	char const* p2
	);

///; static char strdupSrc [] = 

char const* strdup (
	char const* p,
	size_t length = -1
	);

///; static char memcmpSrc [] = 

int memcmp (
	void const* p1,
	void const* p2,
	size_t size
	);

///; static char memchrSrc [] = 

void const* memchr (
	void const* p,
	int c,
	size_t size
	);

///; static char memcpySrc [] = 

void memcpy (
	void* dst,
	void const* src,
	size_t size
	);

///; static char memsetSrc [] = 

void memset (
	void* p,
	int c,
	size_t size
	);

///; static char memcatSrc [] = 

void* memcat (
	void const* p1,
	size_t size1,
	void const* p2,
	size_t size2
	);

///; static char memdupSrc [] = 

void* memdup (
	void const* p,
	size_t size
	);

///; static char randSrc [] = 

int rand ();

///; static char printfSrc [] = 

intptr cdecl printf (
	char const thin* fmtSpecifier,
	...
	);

///; static char atoiSrc [] = 

int atoi (char const* p);

//.............................................................................

///---

namespace jnc {

///+++

//.............................................................................

///; static char collectGarbageSrc [] = 

void collectGarbage ();

///; static char createThreadSrc [] = 

uint64_t createThread (function* threadFunc ());

///; static char sleepSrc [] = 

void sleep (uint32_t msec);

///; static char getTimestampSrc [] = 

uint64_t getTimestamp ();

///; static char getCurrentThreadIdSrc [] = 

uintptr_t getCurrentThreadId ();

///; static char setPosixErrorSrc [] = 

Error const* setPosixError (int errno);

///; static char setStringErrorSrc [] = 

Error const* setStringError (char const* string);

///; static char getLastErrorSrc [] = 

Error const* getLastError ();

///; static char throwSrc [] = 

bool throw () throws;

///; static char formatSrc [] = 

char const* cdecl format (
	char const* fmtSpecifier,
	...
	);

///;

//.............................................................................

///---

} // namespace jnc {

namespace jnci {

///+++

//.............................................................................

///; static char runtimeErrorSrc [] = 

void runtimeError (
	int error,
	void thin* codeAddress
	);

///; static char dynamicSizeOfSrc [] = 

size_t dynamicSizeOf (void const* p);

///; static char dynamicCountOfSrc [] = 

size_t dynamicCountOf (
	void const* p,
	void thin* type
	);

///; static char dynamicCastDataPtrSrc [] = 

void* dynamicCastDataPtr (
	void const* p,
	void thin* type
	);

///; static char dynamicCastClassPtrSrc [] = 

class* dynamicCastClassPtr (
	class const* p,
	void thin* type
	);

///; static char dynamicCastVariantSrc [] = 

bool dynamicCastVariant (
	variant v,
	void thin* type,
	void thin* buffer
	);

///; static char strengthenClassPtrSrc [] = 

class* strengthenClassPtr (class weak* p);

///; static char assertionFailureSrc [] = 

void assertionFailure (
	char const thin* fileName,
	int line, 
	char const thin* condition,
	char const thin* message
	);

///; static char addStaticDestructorSrc [] = 

void addStaticDestructor (void thin* dtor);

///; static char addStaticClassDestructorSrc [] = 

void addStaticClassDestructor (
	void thin* dtor,
	class* obj
	);

///; static char appendFmtLiteralSrc_a [] = 

size_t appendFmtLiteral_a (
	FmtLiteral thin* fmtLiteral,
	char const thin* p,
	size_t length
	);

///; static char appendFmtLiteralSrc_p [] = 

size_t appendFmtLiteral_p (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	char const* p
	);

///; static char appendFmtLiteralSrc_i32 [] = 

size_t appendFmtLiteral_i32 (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	int32 value
	);

///; static char appendFmtLiteralSrc_ui32 [] = 

size_t appendFmtLiteral_ui32 (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	uint32_t value
	);

///; static char appendFmtLiteralSrc_i64 [] = 

size_t appendFmtLiteral_i64 (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	int64 value
	);

///; static char appendFmtLiteralSrc_ui64 [] = 

size_t appendFmtLiteral_ui64 (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	uint64_t value
	);

///; static char appendFmtLiteralSrc_f [] = 

size_t appendFmtLiteral_f (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	double value
	);

///; static char appendFmtLiteralSrc_v [] = 

size_t appendFmtLiteral_v (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	variant v
	);

///; static char appendFmtLiteralSrc_s [] = 

size_t appendFmtLiteral_s (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	String string
	);

///; static char appendFmtLiteralSrc_sr [] = 

size_t appendFmtLiteral_sr (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	StringRef stringRef
	);

///; static char appendFmtLiteralSrc_cb [] = 

size_t appendFmtLiteral_cb (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	ConstBuffer buffer
	);

///; static char appendFmtLiteralSrc_cbr [] = 

size_t appendFmtLiteral_cbr (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	ConstBufferRef bufferRef
	);

///; static char appendFmtLiteralSrc_br [] = 

size_t appendFmtLiteral_br (
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	BufferRef bufferRef
	);

///; static char tryCheckDataPtrRangeDirectSrc [] = 

bool tryCheckDataPtrRangeDirect (
	void thin const* p,
	void thin const* rangeBegin,
	size_t rangeLength
	) throws;

///; static char checkDataPtrRangeDirectSrc [] = 

void checkDataPtrRangeDirect (
	void thin const* p,
	void thin const* rangeBegin,
	size_t rangeLength
	);

///; static char tryCheckNullPtrSrc [] = 

bool tryCheckNullPtr (
	void thin const* p,
	int typeKind
	) throws;

///; static char checkNullPtrSrc [] = 

void checkNullPtr (
	void thin const* p,
	int typeKind
	);

///; static char checkStackOverflowSrc [] = 

void checkStackOverflow ();

///; static char tryLazyGetLibraryFunctionSrc [] = 

void thin* tryLazyGetLibraryFunction (
	jnc.Library* lib,
	size_t index,
	char thin const* name
	) throws;

///; static char lazyGetLibraryFunctionSrc [] = 

void thin* lazyGetLibraryFunction (
	jnc.Library* lib,
	size_t index,
	char thin const* name
	);

///;

//.............................................................................

///---

} // namespace jnci {

